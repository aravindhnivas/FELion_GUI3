{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\Footer.svelte",
    "..\\Modal.svelte",
    "..\\Home.svelte",
    "..\\Powerfile.svelte",
    "..\\Navbar.svelte",
    "..\\Layout.svelte",
    "..\\Normline.svelte",
    "..\\FileBrowser.svelte",
    "..\\QuickView.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n  import {onMount} from \"svelte\"\r\n  onMount(()=>showpage(\"footer\"))\r\n</script>\r\n<style>\r\n    .navbar {\r\n        background: #38236b;\r\n    }\r\n</style>\r\n\r\n<nav class=\"navbar is-fixed-bottom animated fadeInUp\" id=\"footer\" style=\"display:none\">\r\n  <div class=\"navbar-menu\">\r\n\r\n    <div class=\"navbar-start\">\r\n      <div class=\"navbar-item\">\r\n        <p>Developed at Dr.Br&uuml;nken's group FELion@FELIX</p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"navbar-end\">\r\n      <div class=\"navbar-item\">\r\n\r\n        <p>2019 &copy; MIT License<p>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n</nav>",
    "<script context=\"module\">\r\n  import {writable} from \"svelte/store\";\r\n  export const activated =  writable(false), modalContent =  writable(\"\")\r\n  export const modalTitle =  writable(\"Error detail\"), modalType =  writable(\"danger\"), modalPreMsg = writable(\"Error Occured\")\r\n\r\n</script>\r\n\r\n<script>\r\n  \r\n  import { Snackbar } from 'svelma'\r\n  let actionText=\"Show details\";\r\n  let active=false;\r\n\r\n  function openModal(err) {\r\n\r\n    Snackbar.create({ \r\n\r\n      message: $modalPreMsg, position:\"is-top\", type:`is-${$modalType}`, duration: 5000,\r\n      actionText: actionText, onAction: ()=>{ active = true; }\r\n    })\r\n    $activated = false;\r\n  }\r\n\r\n  $: if($activated) openModal()\r\n</script>\r\n\r\n<style>\r\n\r\n.modal-card-body {color: black;}\r\n</style>\r\n\r\n<div class=\"modal\" class:is-active={active}>\r\n\r\n  <div class=\"modal-background\"></div>\r\n  <div class=\"modal-card\">\r\n    <header class=\"modal-card-head\">\r\n      <p class=\"modal-card-title\">{$modalTitle}</p>\r\n    </header>\r\n\r\n    <section class=\"modal-card-body\"> {$modalContent} </section>\r\n\r\n    <footer class=\"modal-card-foot\">\r\n      <button class=\"button is-link\" on:click={()=>active = false}>Cancel</button>\r\n    </footer>\r\n\r\n  </div>\r\n</div>",
    "<script>\r\n\r\n  import AnimateBox from \"../components/AnimateBox.svelte\";\r\n  let animation_welcome;\r\n  import {onMount} from \"svelte\"\r\n  onMount(() => {\r\n\r\n    \r\n    animation_welcome = anime\r\n      .timeline({ loop: false })\r\n      .add({\r\n        targets: \".ml5 .line\",\r\n        opacity: [0.5, 1],\r\n        scaleX: [0, 1],\r\n        easing: \"easeInOutExpo\",\r\n        duration: 700, delay:500\r\n      })\r\n      .add({\r\n        targets: \".ml5 .line\",\r\n        duration: 600,\r\n        easing: \"easeOutExpo\",\r\n        translateY: (el, i) => -0.625 + 0.625 * 2 * i + \"em\"\r\n      })\r\n      .add({\r\n        targets: \".ml5 .letters-left\",\r\n        opacity: [0, 1],\r\n        translateX: [\"0.5em\", 0],\r\n        easing: \"easeOutExpo\",\r\n        duration: 600,\r\n        offset: \"-=300\"\r\n      })\r\n      .add({\r\n        targets: \".ml5 .letters-right\",\r\n        opacity: [0, 1],\r\n        translateX: [\"-0.5em\", 0],\r\n        easing: \"easeOutExpo\",\r\n        duration: 600,\r\n        offset: \"-=600\"\r\n      })\r\n      .add({\r\n        targets: \".ml5 .letters-subtitle\",\r\n        opacity: [0, 1],\r\n        translateX: [\"-0.5em\", 0],\r\n        easing: \"easeOutExpo\",\r\n        duration: 600,\r\n        offset: \"-=600\"\r\n      })\r\n      .add({\r\n        targets: \".ml5\",\r\n        opacity: 1,\r\n        duration: 1000,\r\n        easing: \"easeOutExpo\",\r\n        delay: 1000\r\n      });\r\n  });\r\n</script>\r\n\r\n<style>\r\n  #Home {\r\n    margin-top: 15% !important;\r\n    /* display: none; */\r\n  }\r\n\r\n  .ml5 {\r\n    position: relative;\r\n    font-weight: 300;\r\n    font-size: 4.5em;\r\n    color: #fafafa;\r\n  }\r\n\r\n  .ml5 .text-wrapper {\r\n    position: relative;\r\n    display: inline-block;\r\n    padding-top: 0.1em;\r\n    padding-right: 0.05em;\r\n    padding-bottom: 0.15em;\r\n    line-height: 1em;\r\n  }\r\n\r\n  .ml5 .line {\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    bottom: 0;\r\n    margin: auto;\r\n    height: 3px;\r\n    width: 100%;\r\n    background-color: #fafafa;\r\n    transform-origin: 0.5 0;\r\n  }\r\n  .ml5 .letters {\r\n    display: inline-block;\r\n    opacity: 0;\r\n  }\r\n  .letters-subtitle {\r\n    font-size: 0.4em;\r\n  }\r\n</style>\r\n\r\n\r\n<section class=\"section\" id=\"Home\">\r\n\r\n  <AnimateBox>\r\n    <h1 class=\"ml5\">\r\n      <span class=\"text-wrapper\">\r\n        <span class=\"line line1\" />\r\n        <span class=\"letters letters-left\">FELion</span>\r\n        <span class=\"letters letters-right\">Spectrum Analyser</span>\r\n        <span class=\"line line2\" />\r\n      </span>\r\n      <br />\r\n      <span class=\"letters letters-subtitle\">\r\n        To analyse FELIX data for FELion Instrument\r\n      </span>\r\n    </h1>\r\n  </AnimateBox>\r\n</section>",
    "<script>\r\n    \r\n    // Importing modules\r\n    import Textfield from '@smui/textfield'\r\n    import HelperText from '@smui/textfield/helper-text/index';\r\n    import Fab, {Icon, Label} from '@smui/fab';\r\n    import Checkbox from '@smui/checkbox';\r\n    import FormField from '@smui/form-field';\r\n    import {createToast, browse} from \"../components/Layout.svelte\"\r\n    import {modalContent, activated} from \"../components/Modal.svelte\"\r\n    import CustomDialog from \"../components/CustomDialog.svelte\"\r\n    //////////////////////////////////////////////////////////////////////////////////\r\n\r\n    const writePowfile = () => {\r\n        let contents = `${initContent}\\n${powerfileContent}`\r\n        fs.writeFile(powfile, contents , function(err) {\r\n\r\n            if(err) {\r\n                createToast(\"Power file couldn't be saved.\", \"danger\")\r\n                return console.log(err);\r\n            }\r\n            createToast(\"Power file saved\", \"success\")\r\n        })\r\n    }\r\n    async function savefile() {\r\n\r\n        if (location.length == 0) {return createToast(\"Location is not set. Browse folder to set location\", \"danger\")}\r\n\r\n        const overwrite = await fs.existsSync(powfile)\r\n        overwrite ? overwrite_dialog.open() : writePowfile()\r\n    }\r\n\r\n    function openFolder() {\r\n\r\n        browse({dir:true}).then(result=>{\r\n            if (!result.canceled) {\r\n                location = localStorage[\"powerfile_location\"] = result.filePaths[0]\r\n                createToast(\"Location updated\", \"success\")\r\n            }\r\n        }).catch(err=>{$modalContent = err; $activated=true})\r\n\r\n    }\r\n\r\n    let powerfileContent = '', felixHz = 10, felixShots = 16, convert = null;\r\n    let location = localStorage[\"powerfile_location\"] || \"\";\r\n\r\n    let today = new Date();\r\n    const dd = String(today.getDate()).padStart(2, '0')\r\n    const mm = String(today.getMonth() + 1).padStart(2, '0')\r\n    const yy = today.getFullYear().toString().substr(2)\r\n    let filename = `${dd}_${mm}_${yy}-#`;\r\n\r\n    $: powfile = path.resolve(location, `${filename}.pow`)\r\n\r\n    $: conversion = \"_no_\"\r\n    $: convert ? conversion = \"_\" : conversion = \"_no_\"\r\n\r\n    $: initContent = `#POWER file\\n` +\r\n        `# ${felixHz} Hz FELIX\\n` +\r\n        `#SHOTS=${felixShots}\\n` +\r\n        `#INTERP=linear\\n` +\r\n        `#    IN${conversion}UM (if one deletes the no the firs number will be in \\mu m\\n` +\r\n        `# wavelength/cm-1      energy/pulse/mJ\\n`\r\n\r\n    let overwrite_dialog;\r\n    const handleOverwrite = (e) => {\r\n\r\n        let action = e.detail.action\r\n        // console.log(action)\r\n        if (action === \"Cancel\" || action === \"close\") createToast(\"Powerfile saving cancelled\", \"warning\")\r\n        if (action === \"Yes\") writePowfile()\r\n    }\r\n</script>\r\n\r\n<style>\r\n   \r\n    .section {height: 70vh;}\r\n    .container { height: 100%; margin-bottom: 3em; }\r\n    @media only screen and (max-height: 800px) {.section {overflow-y: auto;}}\r\n\r\n</style>\r\n\r\n<CustomDialog id=\"powerfile-overwrite\" bind:dialog={overwrite_dialog} on:response={handleOverwrite}\r\n    title={\"Overwrite?\"} content={`${filename} already exists. Do you want to overwrite it?`}/>\r\n\r\n<section class=\"section\" id=\"Powerfile\" style=\"display:none\">\r\n    <div class=\"container\" id=\"powfileContainer\">\r\n\r\n        <div style=\"margin-bottom:2em;\">\r\n            <Textfield  style=\"width:90%\" bind:value={location} label=\"Current Location\" />\r\n            <Fab class=\"is-pulled-right\" on:click={openFolder} extended><Label>Browse</Label></Fab>\r\n        </div>\r\n\r\n        <div style=\"margin-bottom:2em;\">\r\n            <Textfield style=\"width:20%\" bind:value={filename} label=\"Filename\" />\r\n            <Textfield style=\"width:20%\" bind:value={felixShots} label=\"FELIX Shots\" on:change={()=>{console.log(felixShots)}}/>\r\n            <Textfield style=\"width:20%\" bind:value={felixHz} label=\"FELIX Hz\" />\r\n            <FormField>\r\n                <Checkbox bind:checked={convert} indeterminate={convert === null} />\r\n                <span slot=\"label\">Convert to &micro;m</span>\r\n            </FormField>\r\n        </div>\r\n\r\n        <Textfield textarea bind:value={powerfileContent} label=\"Powerfile contents\" \r\n            input$aria-controls=\"powercontent_help\" input$aria-describedby=\"powercontent_help\"/>\r\n        <HelperText id=\"powercontent_help\">Enter powerfile measured for {filename}.felix file (wavenumber power-in mJ)</HelperText>\r\n        <Fab style=\"margin:2em 0;\" on:click={savefile} extended><Label>Save</Label></Fab>\r\n    \r\n    </div>\r\n</section>",
    "<script>\r\n\timport Tab, {Icon, Label} from '@smui/tab';\r\n\timport TabBar from '@smui/tab-bar';\r\n\timport Button from '@smui/button';\r\n\timport {onMount} from \"svelte\"\r\n\t\r\n\texport let navItems;\r\n\t\r\n\tlet active = 'Home';\r\n\tconst navigate = () =>{navItems.forEach(item=> item == active ? showpage(item) : hidepage(item))}\r\n\tonMount(()=>{showpage(\"navbar\");})\r\n</script>\r\n\r\n<style lang=\"scss\">#navbar {\n  width: 100vw;\n  margin-bottom: 0;\n  padding: 0; }\n</style>\r\n\r\n<div class=\"box animated fadeInDown\" id=\"navbar\" style=\"display:none\" on:click={navigate}>\r\n\t<TabBar tabs={navItems} let:tab bind:active>\r\n\t\t<Tab {tab}> <Label>{tab}</Label> </Tab>\r\n\t</TabBar>\r\n</div>\r\n",
    "<script context=\"module\">\r\n    export const createToast = (msg, type=\"primary\") => Toast.create({ message: msg, position:\"is-top\", type:`is-${type}`})\r\n    export function browse({filetype=\"\", dir=true}={}) {\r\n        return new Promise((resolve, reject)=>{\r\n\r\n            const mainWindow = remote.getCurrentWindow()\r\n            let type;\r\n            dir ? type = \"openDirectory\" : type = \"openFile\"\r\n\r\n            const options = {\r\n                filters: [\r\n                    { name: filetype, extensions: [`*${filetype}`] },\r\n                    { name: 'All Files', extensions: ['*'] }\r\n\r\n                ],\r\n                properties: [type, \"multiSelections\"],\r\n            }\r\n            remote.dialog.showOpenDialog(mainWindow, options)\r\n            .then(result => {\r\n                console.log(result.canceled)\r\n                console.log(result.filePaths)\r\n                resolve(result)\r\n            }).catch(err => { \r\n                createToast(\"Couldn't open folder\", \"danger\")\r\n                reject(err) })\r\n        })\r\n    }\r\n\r\n</script>\r\n\r\n<script>\r\n    \r\n    // IMPORTING MODULES\r\n    import IconButton, {Icon} from '@smui/icon-button';\r\n    import { fly, slide } from 'svelte/transition';\r\n    import Textfield from '@smui/textfield';\r\n    import {onMount} from \"svelte\";\r\n    import { Toast } from 'svelma'\r\n    // import {activated, modalContent, modalTitle} from \"./Modal.svelte\"\r\n    import FileBrowser from \"./FileBrowser.svelte\"\r\n    \r\n    ////////////////////////////////////////////////////////////////////////////\r\n\r\n    // EXPORTED variables\r\n\r\n    export let id;\r\n    export let fileChecked=[];\r\n    export let filetype = \"felix\"\r\n    export let currentLocation = localStorage[`${filetype}_location`] || \"\";\r\n\r\n    // let refresh = false;\r\n    // onMount(()=>{if (currentLocation != \"\") {refresh = true}})\r\n\r\n    function browse_folder() {\r\n        browse({dir:true}).then(result=>{\r\n\r\n            if (!result.canceled) {\r\n                currentLocation= localStorage[`${filetype}_location`] = result.filePaths[0]\r\n                // refresh = true;\r\n\r\n            }\r\n        })\r\n        \r\n    }\r\n\r\n    let toggleBrowser = true;\r\n\r\n</script>\r\n\r\n<style lang=\"scss\">.filebrowser, .fileContainer {\n  background-image: url(./assets/css/intro.svg);\n  height: calc(100vh - 7em); }\n\n.plotContainer {\n  max-height: calc(100vh - 25em);\n  overflow-y: auto;\n  padding-bottom: 3em; }\n\n.filebrowser {\n  padding-left: 2em;\n  padding-top: 1em;\n  background-color: #6a50ad59;\n  border-radius: 0; }\n\n.fileContainer {\n  margin: 0 2em;\n  padding-bottom: 5rem;\n  width: calc(70vw - 2em); }\n\n* :global(.box) {\n  background-color: #654ca25c; }\n\n* :global(.mdc-list-item) {\n  height: 2em; }\n\n* :global(.mdc-switch.mdc-switch--checked .mdc-switch__thumb, .mdc-switch.mdc-switch--checked .mdc-switch__track) {\n  background-color: #ffffff; }\n\n* :global(.material-icons) {\n  margin-right: 0.2em;\n  cursor: pointer; }\n\n* :global(.align) {\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap; }\n\n* :global(.center) {\n  justify-content: center; }\n\n* :global(.gap) {\n  margin-right: 2em; }\n\n.buttonContainer {\n  max-height: 20em;\n  overflow-y: auto; }\n\n.box {\n  border-radius: 0; }\n\n.container {\n  min-height: calc(100vh - 10em); }\n\n.plotContainer > div {\n  margin-top: 1em; }\n</style>\r\n\r\n<section {id} style=\"display:none\" class=\"animated fadeIn\">\r\n    <div class=\"columns\">\r\n\r\n        {#if toggleBrowser}\r\n            <div class=\"column is-one-fifth-widescreen is-one-quarter-desktop box filebrowser\" transition:fly=\"{{ x: -100, duration: 500 }}\">\r\n                <FileBrowser bind:currentLocation {filetype} bind:fileChecked />\r\n\r\n            </div>\r\n        {/if}\r\n\r\n        <div class=\"column fileContainer\">\r\n            <div class=\"container button-plot-container box\">\r\n\r\n                <div class=\"align\">\r\n                    <IconButton  toggle bind:pressed={toggleBrowser}>\r\n                        <Icon class=\"material-icons\" on>menu_open</Icon>\r\n                        <Icon class=\"material-icons\" >menu</Icon>\r\n                    </IconButton>\r\n                    <button class=\"button is-link gap\" on:click={browse_folder}>Browse</button>\r\n                    <Textfield style=\"margin-bottom:1em;\" bind:value={currentLocation} label=\"Current location\" />\r\n                </div>\r\n\r\n                <div class=\"align buttonContainer\"> <slot name=\"buttonContainer\" /></div>\r\n                <div class=\"plotContainer\"> <slot name=\"plotContainer\" /> </div>\r\n                \r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n</section>",
    "<script>\r\n    // IMPORTING Modules\r\n    import Textfield from '@smui/textfield'\r\n    import HelperText from '@smui/textfield/helper-text/index'\r\n    import Layout, {browse, createToast} from \"../components/Layout.svelte\"\r\n    import { fly, fade } from 'svelte/transition'\r\n    import Ripple from '@smui/ripple'\r\n\r\n    import {activated, modalContent} from \"../components/Modal.svelte\"\r\n    // import {bindDialog, filelist, filelistBinded} from \"../components/DialogChecklist.svelte\"\r\n    import IconButton, {Icon} from '@smui/icon-button'\r\n    import {plot, subplot} from \"../js/functions.js\"\r\n\r\n    import Radio from '@smui/radio'\r\n    import FormField from '@smui/form-field'\r\n    import { flip } from 'svelte/animate'\r\n\r\n    import Select, {Option} from '@smui/select'\r\n    import Switch from '@smui/switch'\r\n    import DataTable, {Head, Body, Row, Cell} from '@smui/data-table'\r\n    import Checkbox from '@smui/checkbox';\r\n    import CustomCheckbox from '../components/CustomCheckbox.svelte';\r\n    import ReportLayout from '../components/ReportLayout.svelte';\r\n    import QuickView from '../components/QuickView.svelte';\r\n    import List, {Item, Meta, Label} from '@smui/list';\r\n\r\n    const {BrowserWindow} = remote\r\n\r\n    import FileBrowser from \"../components/FileBrowser.svelte\"\r\n\r\n   ///////////////////////////////////////////////////////////////////////\r\n\r\n    let filetype=\"felix\", id=\"Normline\", fileChecked=[], delta=1, toggleRow=false;\r\n\r\n    $: felixfiles = fileChecked.map(file=>path.resolve(currentLocation, file))\r\n    let plottedFiles = [], theoryLocation = \"\"\r\n\r\n    let currentLocation = theoryLocation= localStorage[`${filetype}_location`] || \"\"\r\n    \r\n    $: console.log(`${filetype} Update: \\n${currentLocation}`)\r\n\r\n    ///////////////////////////////////////////////////////////////////////\r\n\r\n    // Theory file\r\n    let sigma = 20, scale=1, thoeryfiles = [], show_theoryplot = false, theoryRefresh = true;\r\n\r\n    $: console.log(\"Theory files: \", thoeryfiles, theoryLocation)\r\n    $: console.log(\"Theory Location\", theoryLocation)\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////\r\n    \r\n    let openShell = false;\r\n\r\n    let normMethod = \"Relative\", normMethod_datas = {}\r\n    let graphPlotted = false, overwrite_expfit = false\r\n\r\n    let line = [], index = [], annotations = []\r\n    let output_name = \"averaged\"\r\n    let dataTableHead = [\"Filename\", \"Line (cm-1)\", \"Frequency, Ampl., FWHM - (cm-1)\"]\r\n    let dataTable = [], showDataTable=false, showTheoryFiles = false\r\n\r\n    const replot = () => {\r\n\r\n        if (graphPlotted) {Plotly.react(\"avgplot\", normMethod_datas[normMethod].data, normMethod_datas[normMethod].layout, { editable: true })}\r\n    }\r\n\r\n    localStorage[\"pythonpath\"] = path.resolve(\"C:\\\\ProgramData\\\\Miniconda3\\\\python\")\r\n    localStorage[\"pythonscript\"] = path.resolve(__dirname, \"assets/python_files\")\r\n\r\n    function plotData(event=null, filetype=\"felix\", general=null){\r\n\r\n        if (fileChecked.length === 0) {return createToast(\"No files selected\", \"danger\")}\r\n\r\n        let target = event.target\r\n\r\n        target.classList.toggle(\"is-loading\")\r\n        if (filetype == \"felix\") {graphPlotted = false, output_name = \"averaged\"}\r\n\r\n        if (filetype == \"exp_fit\") {if (index.length < 2) {\r\n            target.classList.toggle(\"is-loading\")\r\n            return createToast(\"Range not found!!. Select a range using Box-select\", \"danger\")\r\n        }}\r\n\r\n        let pyfileInfo = {\r\n        \r\n            felix: {file:\"normline.py\" , args:[...felixfiles, delta]},\r\n            exp_fit: {file:\"exp_gauss_fit.py\" , args:[...felixfiles, overwrite_expfit, output_name, normMethod, currentLocation, ...index]},\r\n        }\r\n\r\n        let pyfile = pyfileInfo[filetype].file\r\n        let args = pyfileInfo[filetype].args\r\n\r\n        if (filetype == \"general\") {\r\n\r\n            console.log(\"Sending general arguments: \", general.args)\r\n            spawn(\r\n                localStorage[\"pythonpath\"],\r\n                [\"-i\", path.join(localStorage[\"pythonscript\"], general.pyfile), ...general_args],\r\n                {\r\n                    detached: true,\r\n                    stdio: 'ignore',\r\n                    shell: openShell\r\n                }\r\n            )\r\n            py.unref()\r\n            createToast(\"General process sent. Expect an response soon...\")\r\n            return;\r\n        }\r\n\r\n        let py;\r\n\r\n        try {py = spawn( localStorage[\"pythonpath\"], [path.resolve(localStorage[\"pythonscript\"], pyfile), args] )}\r\n        catch (err) {\r\n            $modalContent = \"Error accessing python. Set python location properly in Settings\"\r\n            $activated = true\r\n            target.classList.toggle(\"is-loading\")\r\n            return\r\n        }\r\n        createToast(\"Process Started\")\r\n\r\n        py.stdout.on(\"data\", data => {\r\n\r\n            console.log(\"Ouput from python\")\r\n            let dataReceived = data.toString(\"utf8\")\r\n            console.log(dataReceived)\r\n        });\r\n\r\n        let error_occured_py = false;\r\n\r\n        py.stderr.on(\"data\", err => {\r\n            $modalContent = err\r\n            $activated = true\r\n            error_occured_py = true;\r\n        });\r\n\r\n        py.on(\"close\", () => {\r\n\r\n            if (!error_occured_py) {\r\n                try {\r\n                \r\n                    let dataFromPython = fs.readFileSync(path.join(localStorage[\"pythonscript\"], \"data.json\"))\r\n                    dataFromPython = JSON.parse(dataFromPython.toString(\"utf-8\"))\r\n                    \r\n                    console.log(dataFromPython)\r\n\r\n                    if (filetype == \"felix\") {\r\n\r\n                        line = []\r\n                        index = []\r\n                        annotations = []\r\n\r\n                        let avgdataToPlot;\r\n\r\n                        let signal_formula;\r\n                        let ylabel;\r\n\r\n                        if (normMethod === \"Log\") {\r\n                            avgdataToPlot = dataFromPython[\"average\"]\r\n\r\n                            signal_formula = \"Signal = -ln(C/B)/Power(in J)\"\r\n                            ylabel = \"Normalised Intensity per J\"\r\n\r\n                        } else if (normMethod == \"Relative\") {\r\n\r\n                            avgdataToPlot = dataFromPython[\"average_rel\"]\r\n\r\n                            signal_formula = \"Signal = (1-C/B)*100\"\r\n                            ylabel = \"Relative Depletion (%)\"\r\n\r\n                        } else if (normMethod == \"IntensityPerPhoton\") {\r\n\r\n                            avgdataToPlot = dataFromPython[\"average_per_photon\"]\r\n\r\n                            signal_formula = \"Signal = -ln(C/B)/#Photons\"\r\n                            ylabel = \"Normalised Intensity per photon\"\r\n                        }\r\n\r\n\r\n                        const get_data = (data) => {\r\n                            let dataPlot = [];\r\n                            for (let x in data) { dataPlot.push(data[x]) }\r\n                            return dataPlot\r\n                        }\r\n                        let signal = {\r\n                            \"rel\": \"Signal = (1-C/B)*100\",\r\n                            \"log\": \"Signal = -ln(C/B)/Power(in J)\",\r\n                            \"hv\": \"Signal = -ln(C/B)/#Photons\"\r\n                        }\r\n                        const set_title = (method) => `Normalised and Averaged Spectrum (delta=${delta})<br>${signal[method]}; {C=Measured Count, B=Baseline Count}`\r\n\r\n                        normMethod_datas = {\r\n                            \"Relative\": {\r\n                                \"data\": get_data(dataFromPython[\"average_rel\"]),\r\n                                \"layout\": {\r\n                                    \"title\": set_title(\"rel\"),\r\n                                    \"yaxis\": { \"title\": \"Relative Depletion (%)\" },\r\n                                    \"xaxis\": { \"title\": \"Calibrated Wavelength (cm-1)\" }\r\n                                }\r\n                            },\r\n                            \"Log\": {\r\n                                \"data\": get_data(dataFromPython[\"average\"]),\r\n                                \"layout\": {\r\n                                    \"title\": set_title(\"log\"),\r\n                                    \"yaxis\": { \"title\": \"Normalised Intensity per J\" },\r\n                                    \"xaxis\": { \"title\": \"Calibrated Wavelength (cm-1)\" }\r\n                                }\r\n                            },\r\n                            \"IntensityPerPhoton\": {\r\n                                \"data\": get_data(dataFromPython[\"average_per_photon\"]),\r\n                                \"layout\": {\r\n                                    \"title\": set_title(\"hv\"),\r\n                                    \"yaxis\": { \"title\": \"Normalised Intensity per photon\" },\r\n                                    \"xaxis\": { \"title\": \"Calibrated Wavelength (cm-1)\" }\r\n                                }\r\n                            },\r\n\r\n                        }\r\n\r\n                        plot(\r\n                            \"Baseline Corrected\",\r\n                            \"Wavelength (cm-1)\",\r\n                            \"Counts\",\r\n                            dataFromPython[\"base\"],\r\n                            \"bplot\"\r\n                        );\r\n\r\n                        plot(\r\n                            `Normalised and Averaged Spectrum (delta=${delta})<br>${signal_formula}; {C=Measured Count, B=Baseline Count}`,\r\n                            \"Calibrated Wavelength (cm-1)\",\r\n                            ylabel,\r\n                            avgdataToPlot,\r\n                            \"avgplot\"\r\n                        );\r\n\r\n                        //Spectrum and Power Analyer\r\n                        subplot(\r\n                            \"Spectrum and Power Analyser\",\r\n                            \"Wavelength set (cm-1)\",\r\n                            \"SA (cm-1)\",\r\n                            dataFromPython[\"SA\"],\r\n                            \"saPlot\",\r\n                            \"Wavelength (cm-1)\",\r\n                            `Total Power (mJ)`,\r\n                            dataFromPython[\"pow\"]\r\n                        );\r\n\r\n                        let avgplot = document.getElementById(\"avgplot\")\r\n                        avgplot.on(\"plotly_selected\", (data) => {\r\n                            if (!data) console.log(\"No data available to fit\")\r\n                            else {\r\n                                console.log(data)\r\n\r\n                                let { range } = data\r\n                                output_name = data.points[0].data.name.split(\".\")[0]\r\n                                index = range.x\r\n\r\n                                console.log(`Selected file: ${output_name}`)\r\n                                console.log(`Index selected: ${index}`)\r\n                            }\r\n                        })\r\n\r\n                        console.log(\"Graph Plotted\")\r\n                        createToast(\"Graph Plotted\", \"success\")\r\n                        graphPlotted = true\r\n                        plottedFiles = fileChecked.map(file=>file.split(\".\")[0])\r\n\r\n                    } else if (filetype == \"opofile\") {\r\n                        plot(\"OPO spectrum\", \"Wavenumber (cm-1)\", \"Counts\", dataFromPython[\"real\"], \"opoplot\");\r\n                        plot(\"OPO spectrum: Depletion (%)\", \"Wavenumber (cm-1)\", \"Depletion (%)\", dataFromPython[\"relative\"], \"opoRelPlot\");\r\n                    } else if (filetype == \"theory\") {\r\n\r\n                        let normethod = this.args[0];\r\n                        let ylabel;\r\n                        if (normethod === \"Log\") { ylabel = \"Normalised Intensity per J\" }\r\n                        else if (normethod === \"Relative\") { ylabel = \"Relative Depletion (%)\" }\r\n                        else { ylabel = \"Normalised Intensity per Photon\" }\r\n\r\n                        let theoryData = [];\r\n                        for (let x in dataFromPython[\"line_simulation\"]) { theoryData.push(dataFromPython[\"line_simulation\"][x]) }\r\n\r\n                        plot(\r\n                            \"Experimental vs Theory\",\r\n                            \"Calibrated Wavelength (cm-1)\",\r\n                            ylabel, [dataFromPython[\"averaged\"], ...theoryData],\r\n                            \"exp-theory-plot\"\r\n                        );\r\n                    } else if (filetype == \"exp_fit\") {\r\n\r\n                        Plotly.addTraces(\"avgplot\", dataFromPython[\"fit\"])\r\n                        line = [...line, ...dataFromPython[\"line\"]]\r\n                        Plotly.relayout(\"avgplot\", { shapes: line })\r\n\r\n                        annotations = [...annotations, dataFromPython[\"annotations\"]]\r\n                        Plotly.relayout(\"avgplot\", { annotations: annotations })\r\n                        \r\n                        dataTable = [...dataTable, {name: output_name, freq:dataFromPython[\"freq\"], line: dataFromPython[\"fit\"].name}]\r\n\r\n                        console.log(\"Line fitted\")\r\n                        createToast(\"Line fitted with gaussian function\", \"success\")\r\n                    }\r\n                \r\n                } catch (err) { $modalContent = err; $activated = true }\r\n            }\r\n            console.log(\"Process closed\")\r\n            target.classList.toggle(\"is-loading\")\r\n        })\r\n    }\r\n    const clearAllPeak = () => {\r\n\r\n        console.log(\"Removing all found peak values\")\r\n\r\n        if (line.length === 0 & annotations.length === 0) {createToast(\"No fitted lines found\", \"danger\")}\r\n\r\n        annotations = []\r\n        index = []\r\n        Plotly.relayout(\"avgplot\", { annotations: [], shapes: [] })\r\n\r\n        let plottedFiles_length = line.length / 2\r\n        console.log(`Total files plotted: ${plottedFiles_length}`)\r\n        \r\n        for (let i=0; i<plottedFiles_length; i++) {Plotly.deleteTraces(\"avgplot\", [-1])}\r\n        line = []\r\n        ready_to_fit = false\r\n    }\r\n    const clearLastPeak = () => {\r\n        if (line.length > 0) {\r\n        \r\n            //   delete_file_line()\r\n\r\n            Plotly.deleteTraces(\"avgplot\", [-1])\r\n            \r\n            console.log(\"Last fitted peak removed\")\r\n            } else {\r\n            if (annotations.length === 0) {createToast(\"No fitted lines found\", \"danger\")}\r\n            console.log(\"No line fit is found to remove\")\r\n        }\r\n        \r\n        line = line.slice(0, line.length - 2)\r\n        annotations = annotations.slice(0, annotations.length - 1)\r\n        index = []\r\n        Plotly.relayout(\"avgplot\", { annotations: annotations, shapes: line })\r\n        if (line.length === 0) {ready_to_fit = false}\r\n    }\r\n</script>\r\n\r\n<style>\r\n\r\n    * :global(.button) {margin: 0.4em;}\r\n    * :global(.short-input) { max-width: 7em; margin: 0 1em; }\r\n    * :global(.mdc-text-field--outlined) {height: 2.5em;}\r\n    * :global(.plotSlot) { width: 100%}\r\n\r\n    * :global(option) { color: black; }\r\n    * :global(.mdc-data-table) {min-width: 30em}\r\n    .plotSlot > div { width: calc(100% - 1em); margin-top: 1em; }\r\n\r\n    .dataTable {\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n    * :global(hr) {\r\n        width: 90%;\r\n        margin: 1em 0;\r\n    }\r\n    * :global(.report) {\r\n        display: block;\r\n        width: 90%;\r\n        margin-bottom: 1em;\r\n    }\r\n\r\n    * :global(table th:not([align])) {text-align: center; padding: 1em;}\r\n    * :global(table td:not([align])) {text-align: center; padding: 1em;}\r\n</style>\r\n\r\n<QuickView style=\"padding:1em;\" footer={false} bind:active={showTheoryFiles} title=\"Browse Theory files\">\r\n\r\n    <FileBrowser bind:currentLocation={theoryLocation} bind:fileChecked={thoeryfiles} />\r\n</QuickView>\r\n\r\n<Layout {filetype} {id} bind:currentLocation bind:fileChecked >\r\n\r\n    <div class=\"buttonSlot\" slot=\"buttonContainer\">\r\n\r\n        <div class=\"align\" >\r\n\r\n            <button class=\"button is-link\">Create Baseline</button>\r\n            <button class=\"button is-link\" on:click=\"{(e)=>plotData(e, \"felix\")}\">FELIX Plot</button>\r\n            <button class=\"button is-link\" use:Ripple={[true, {color: 'primary'}]} tabindex=\"0\" on:click=\"{()=>toggleRow = !toggleRow}\">Add Theory</button>\r\n            <button class=\"button is-link\">Open in Matplotlib</button>\r\n            <button class=\"button is-link\" on:click=\"{(e)=>plotData(e, \"opo\")}\">OPO</button>\r\n            <Textfield style=\"width:7em\" variant=\"outlined\" bind:value={delta} label=\"Delta\" />\r\n            <IconButton toggle bind:pressed={openShell}>\r\n                <Icon class=\"material-icons\">code</Icon>\r\n                <Icon class=\"material-icons\" on>settings_ethernet</Icon>\r\n            </IconButton>\r\n\r\n        </div>\r\n\r\n        {#if toggleRow}\r\n            <div class=\"align\" transition:fly=\"{{ y: -20, duration: 500 }}\">\r\n                <button class=\"button is-link\" on:click=\"{()=>showTheoryFiles = !showTheoryFiles}\">Browse File</button>\r\n                <!-- <button class=\"button is-link\" on:click=\"{()=>showTheoryFiles = !showTheoryFiles}\">Show files</button> -->\r\n                <Textfield style=\"width:7em; margin-right:0.5em;\" variant=\"outlined\" bind:value={sigma} label=\"Sigma\" />\r\n                <Textfield style=\"width:7em\" variant=\"outlined\" bind:value={scale} label=\"Scale\" />\r\n                <button class=\"button is-link\">Open in Matplotlib</button>\r\n                <button class=\"button is-link\">Submit</button>\r\n            </div>\r\n        {/if}\r\n\r\n\r\n        <div class=\"align\" on:change={replot}>\r\n            {#each [\"Log\", \"Relative\", \"IntensityPerPhoton\"] as method}\r\n                <FormField >\r\n                    <Radio bind:group={normMethod} value={method}  />\r\n                    <span slot=\"label\">{method}</span>\r\n                </FormField>\r\n            {/each}\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <div class=\"plotSlot\" slot=\"plotContainer\">\r\n\r\n        {#if show_theoryplot}\r\n            <div id=\"exp-theory-plot\" transition:fade></div>\r\n        {/if}\r\n    \r\n        <div id=\"bplot\"></div>\r\n        <div id=\"saPlot\"></div>\r\n        <div id=\"avgplot\"></div>\r\n\r\n        <!-- <div class=\"is-divider\" data-content=\"Graph END\"></div> -->\r\n        {#if graphPlotted}\r\n            \r\n            <!-- Pos-processing felix data -->\r\n            <div transition:fade>\r\n                <Select bind:value={output_name} label=\"Output filename\">\r\n                    {#each [\"averaged\", ...plottedFiles] as file}\r\n                        <Option value={file} selected={output_name === file}>{file}</Option>\r\n                    {/each}\r\n                </Select>\r\n                <FormField style=\"margin: 0 1em; padding-bottom: 1em;\">\r\n                    <Switch bind:checked={overwrite_expfit} />\r\n                    <span slot=\"label\">Overwrite</span>\r\n                </FormField>\r\n                <button class=\"button is-link\" on:click=\"{(e)=>plotData(e, \"exp_fit\")}\">Exp Fit.</button>\r\n                <button class=\"button is-warning\" on:click={clearLastPeak}>Clear Last</button>\r\n                <button class=\"button is-danger\" on:click={clearAllPeak}>Clear All</button>\r\n                <button class=\"button is-danger\" on:click=\"{()=>dataTable = []}\">Clear Table</button>\r\n            </div>\r\n\r\n            <!-- Frequency table list -->\r\n            <div><h1 class=\"mdc-typography--headline4\">Frequency table</h1></div>\r\n            <hr>\r\n            <div class=\"dataTable\" transition:fade>\r\n\r\n                <DataTable table$aria-label=\"felixfile line-list\" table$id=\"felixTable\" id=\"felixTableContainer\">\r\n                    <Head>\r\n                        <Row>\r\n                            {#each dataTableHead as item}\r\n                                <Cell >{item}</Cell>\r\n                            {/each}\r\n                        </Row>\r\n                    </Head>\r\n                    <Body>\r\n                    {#each dataTable.sort((x, y)=>x[1]-y[1]) as table (table.freq)}\r\n                        <Row>\r\n                            <Cell>{table.name}</Cell>\r\n                            <Cell>{table.freq}</Cell>\r\n                            <Cell>{table.line}</Cell>\r\n                        </Row>\r\n                    {/each}\r\n                    </Body>\r\n                </DataTable>\r\n            \r\n            </div>\r\n\r\n            <ReportLayout bind:currentLocation id=\"felixreport\", plotID={[\"bplot\", \"saPlot\", \"avgplot\", \"exp-theory-plot\"]} includeTable={true}/>\r\n        {/if}\r\n    \r\n    </div>\r\n\r\n</Layout>",
    "<script context=\"module\">\r\n    export const createToast = (msg, type=\"primary\") => Toast.create({ message: msg, position:\"is-top\", type:`is-${type}`})\r\n</script>\r\n\r\n<script>\r\n\r\n    import List, {Item, Meta, Label} from '@smui/list';\r\n    import Checkbox from '@smui/checkbox';\r\n    import IconButton, {Icon} from '@smui/icon-button';\r\n    import { fly, slide } from 'svelte/transition';\r\n    import FormField from '@smui/form-field';\r\n    import Switch from '@smui/switch';\r\n    import Textfield from '@smui/textfield';\r\n    import { Toast } from 'svelma'\r\n    import {activated, modalContent, modalTitle} from \"./Modal.svelte\"\r\n    import {onMount} from \"svelte\"\r\n\r\n    ///////////////////////////////////////////////////////////////////////////\r\n\r\n    export let fileChecked = [],  currentLocation = \"\", filetype = \"\"\r\n\r\n    // $: refresh ? getfiles() : console.log(\"folder refresh Idle mode\") \r\n    let parentFolder = path.basename(currentLocation)\r\n    let original_location = currentLocation\r\n    let files = []\r\n    let otherfolders = []\r\n    let selectAll=false;\r\n    let showfiles = true;\r\n    let original_files = [];\r\n    let searchKey = \"\";\r\n\r\n    const searchfile = () => {\r\n        console.log(searchKey)\r\n        if (!searchKey) {files = original_files}\r\n        else {files = original_files.filter(file=>file.includes(searchKey))}\r\n    }\r\n\r\n    function getfiles(toast=false) {\r\n\r\n        original_files = otherfolders = files = fileChecked = [], selectAll = false\r\n        try {\r\n            let folderfile = fs.readdirSync(currentLocation).map(file=>path.join(currentLocation, file))\r\n            let allfiles = folderfile.filter(file=>fs.lstatSync(file).isFile())\r\n            let typefiles = allfiles.filter(file=>file.endsWith(filetype))\r\n            original_files = files = typefiles.map(file=>path.basename(file))\r\n            otherfolders = folderfile.filter(file=>fs.lstatSync(file).isDirectory()).map(file=>path.basename(file))\r\n            console.log(\"Folder updated for \", filetype, \"\\n\", files)\r\n            if (toast) {createToast(\"Files updated\")}\r\n            // refresh = false;\r\n        } catch (err) { \r\n            $modalContent = err;\r\n            $activated = true;\r\n         }\r\n    }\r\n\r\n    const changeDirectory = (goto) => {\r\n        currentLocation = path.resolve(currentLocation, goto)\r\n        parentFolder = path.basename(currentLocation)\r\n        getfiles()\r\n    }\r\n\r\n    onMount(()=> {if(currentLocation !== \"\") getfiles()} )\r\n\r\n\r\n</script>\r\n\r\n\r\n<style>\r\n    .filelist { max-height: calc(100vh - 30em); overflow-y: auto; }\r\n    .folderfile-list {max-height: calc(100vh - 20em); overflow-y: auto;}\r\n    .align {display: flex; align-items: center;}\r\n    .center {justify-content: center;}\r\n    .browseIcons {cursor: pointer;}\r\n\r\n</style>\r\n\r\n<div class=\"align center browseIcons\">\r\n    <Icon class=\"material-icons\" on:click=\"{()=>changeDirectory(original_location)}\">home</Icon>\r\n    <Icon class=\"material-icons\" on:click=\"{()=>{getfiles(true)}}\">refresh</Icon>\r\n    <Icon class=\"material-icons\" on:click=\"{()=>changeDirectory(\"../\")}\">arrow_back</Icon>\r\n</div>\r\n<Textfield on:keyup={searchfile} style=\"margin-bottom:1em;\" bind:value={searchKey} label=\"Seach\" />\r\n\r\n<div class=\"align center\">\r\n    <FormField>\r\n        <Switch bind:checked={selectAll} on:change=\"{()=>selectAll ? fileChecked = [...files] : fileChecked = []}\"/>\r\n        <span slot=\"label\">Select All</span>\r\n    </FormField>\r\n</div>\r\n\r\n<div class=\"folderfile-list\">\r\n\r\n    <div class=\"align folderlist\" >\r\n        <IconButton  toggle bind:pressed={showfiles}>\r\n            <Icon class=\"material-icons\" on>keyboard_arrow_down</Icon>\r\n            <Icon class=\"material-icons\" >keyboard_arrow_right</Icon>\r\n        </IconButton>\r\n        <div class=\"mdc-typography--subtitle1\">{parentFolder}</div>\r\n    </div>\r\n\r\n    {#if showfiles && files != \"\" }\r\n        <div class=\"filelist\" style=\"padding-left:1em;\" transition:fly=\"{{ y: -20, duration: 500 }}\">\r\n            <List checklist>\r\n                {#each files as file (file)}\r\n                    <Item>\r\n                        <Label>{file}</Label>\r\n                        <Meta> <Checkbox bind:group={fileChecked} value={file} on:click=\"{()=>selectAll=false}\"/> </Meta>\r\n                    </Item>\r\n                {/each}\r\n            </List>\r\n        </div>\r\n    {:else if files == \"\"}\r\n        <div class=\"mdc-typography--subtitle1 align center\">No {filetype} here!</div>        \r\n    {/if}\r\n    <div class=\"otherFolderlist\" style=\"cursor:pointer\">\r\n        {#each otherfolders as folder (folder)}\r\n            <div class=\"align\" on:click=\"{()=>changeDirectory(folder)}\" transition:slide|local>\r\n                <Icon class=\"material-icons\">keyboard_arrow_right</Icon>\r\n                <div class=\"mdc-typography--subtitle1\">{folder}</div>\r\n            </div>\r\n        {/each}\r\n    </div>\r\n</div>",
    "<script>\r\n    export let title = \"Quick View\", active = false, style = \"\", footer = true;\r\n</script>\r\n\r\n<style>\r\n\r\n    .quickview {margin: 5em 0;}\r\n    footer, .quickview {background-color: #594098fa;}\r\n    p {color: #fafafa;}\r\n    .delete {background-color: #fafafa;}\r\n    /* .quickview-body {padding: 1em;} */\r\n    .delete:hover {background-color: #f14668;}\r\n    \r\n</style>\r\n\r\n<div class=\"quickview\" class:is-active={active}>\r\n  \r\n  <header class=\"quickview-header\">\r\n    <p class=\"title\">{title}</p>\r\n    <span class=\"delete\" data-dismiss=\"quickview\" on:click=\"{()=>active=false}\"></span>\r\n  </header>\r\n\r\n  <div class=\"quickview-body\" {style}>\r\n    <div class=\"quickview-block\">\r\n      <slot>Contents</slot>\r\n    </div>\r\n  </div>\r\n\r\n  {#if footer}\r\n    <footer class=\"quickview-footer\"> </footer>\r\n  {/if}\r\n</div>"
  ],
  "names": [],
  "mappings": "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"
}