{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\Footer.svelte",
    "..\\Modal.svelte",
    "..\\Home.svelte",
    "..\\Powerfile.svelte",
    "..\\Timescan.svelte",
    "..\\Misc.svelte",
    "..\\Navbar.svelte",
    "..\\Layout.svelte",
    "..\\Masspec.svelte",
    "..\\THz.svelte",
    "..\\Settings.svelte",
    "..\\Normline.svelte",
    "..\\FileBrowser.svelte",
    "..\\ReportLayout.svelte",
    "..\\QuickView.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n  import {onMount} from \"svelte\"\r\n  onMount(()=>showpage(\"footer\"))\r\n</script>\r\n<style>\r\n    .navbar {\r\n        background: #38236b;\r\n    }\r\n</style>\r\n\r\n<nav class=\"navbar is-fixed-bottom animated fadeInUp\" id=\"footer\" style=\"display:none\">\r\n  <div class=\"navbar-menu\">\r\n\r\n    <div class=\"navbar-start\">\r\n      <div class=\"navbar-item\">\r\n        <p>Developed at Dr.Br&uuml;nken's group FELion@FELIX</p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"navbar-end\">\r\n      <div class=\"navbar-item\">\r\n\r\n        <p>2019 &copy; MIT License<p>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n</nav>",
    "<script context=\"module\">\r\n  import {writable} from \"svelte/store\";\r\n  export const activated =  writable(false), modalContent =  writable(\"\")\r\n  export const modalTitle =  writable(\"Error detail\"), modalType =  writable(\"danger\"), modalPreMsg = writable(\"Error Occured\")\r\n\r\n</script>\r\n\r\n<script>\r\n  \r\n  import { Snackbar } from 'svelma'\r\n  let actionText=\"Show details\";\r\n  let active=false;\r\n\r\n  function openModal(err) {\r\n\r\n    Snackbar.create({ \r\n\r\n      message: $modalPreMsg, position:\"is-top\", type:`is-${$modalType}`, duration: 5000,\r\n      actionText: actionText, onAction: ()=>{ active = true; }\r\n    })\r\n    $activated = false;\r\n  }\r\n\r\n  $: if($activated) openModal()\r\n</script>\r\n\r\n<style>\r\n\r\n.modal-card-body {color: black;}\r\n</style>\r\n\r\n<div class=\"modal\" class:is-active={active}>\r\n\r\n  <div class=\"modal-background\"></div>\r\n  <div class=\"modal-card\">\r\n    <header class=\"modal-card-head\">\r\n      <p class=\"modal-card-title\">{$modalTitle}</p>\r\n    </header>\r\n\r\n    <section class=\"modal-card-body\"> {$modalContent} </section>\r\n\r\n    <footer class=\"modal-card-foot\">\r\n      <button class=\"button is-link\" on:click={()=>active = false}>Cancel</button>\r\n    </footer>\r\n\r\n  </div>\r\n</div>",
    "<script>\r\n\r\n  import AnimateBox from \"../components/AnimateBox.svelte\";\r\n  let animation_welcome;\r\n  import {onMount} from \"svelte\"\r\n  onMount(() => {\r\n\r\n    \r\n    animation_welcome = anime\r\n      .timeline({ loop: false })\r\n      .add({\r\n        targets: \".ml5 .line\",\r\n        opacity: [0.5, 1],\r\n        scaleX: [0, 1],\r\n        easing: \"easeInOutExpo\",\r\n        duration: 700, delay:500\r\n      })\r\n      .add({\r\n        targets: \".ml5 .line\",\r\n        duration: 600,\r\n        easing: \"easeOutExpo\",\r\n        translateY: (el, i) => -0.625 + 0.625 * 2 * i + \"em\"\r\n      })\r\n      .add({\r\n        targets: \".ml5 .letters-left\",\r\n        opacity: [0, 1],\r\n        translateX: [\"0.5em\", 0],\r\n        easing: \"easeOutExpo\",\r\n        duration: 600,\r\n        offset: \"-=300\"\r\n      })\r\n      .add({\r\n        targets: \".ml5 .letters-right\",\r\n        opacity: [0, 1],\r\n        translateX: [\"-0.5em\", 0],\r\n        easing: \"easeOutExpo\",\r\n        duration: 600,\r\n        offset: \"-=600\"\r\n      })\r\n      .add({\r\n        targets: \".ml5 .letters-subtitle\",\r\n        opacity: [0, 1],\r\n        translateX: [\"-0.5em\", 0],\r\n        easing: \"easeOutExpo\",\r\n        duration: 600,\r\n        offset: \"-=600\"\r\n      })\r\n      .add({\r\n        targets: \".ml5\",\r\n        opacity: 1,\r\n        duration: 1000,\r\n        easing: \"easeOutExpo\",\r\n        delay: 1000\r\n      });\r\n  });\r\n</script>\r\n\r\n<style>\r\n  #Home {\r\n    margin-top: 15% !important;\r\n    /* display: none; */\r\n  }\r\n\r\n  .ml5 {\r\n    position: relative;\r\n    font-weight: 300;\r\n    font-size: 4.5em;\r\n    color: #fafafa;\r\n  }\r\n\r\n  .ml5 .text-wrapper {\r\n    position: relative;\r\n    display: inline-block;\r\n    padding-top: 0.1em;\r\n    padding-right: 0.05em;\r\n    padding-bottom: 0.15em;\r\n    line-height: 1em;\r\n  }\r\n\r\n  .ml5 .line {\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    bottom: 0;\r\n    margin: auto;\r\n    height: 3px;\r\n    width: 100%;\r\n    background-color: #fafafa;\r\n    transform-origin: 0.5 0;\r\n  }\r\n  .ml5 .letters {\r\n    display: inline-block;\r\n    opacity: 0;\r\n  }\r\n  .letters-subtitle {\r\n    font-size: 0.4em;\r\n  }\r\n</style>\r\n\r\n\r\n<section class=\"section\" id=\"Home\">\r\n  <AnimateBox>\r\n\r\n    <h1 class=\"ml5\">\r\n      \r\n      <span class=\"text-wrapper\">\r\n      \r\n        <span class=\"line line1\" />\r\n      \r\n        <span class=\"letters letters-left\">FELion</span>\r\n        <span class=\"letters letters-right\">Spectrum Analyser</span>\r\n        <span class=\"line line2\" />\r\n      \r\n      </span>\r\n      <br />\r\n      \r\n      <span class=\"letters letters-subtitle\"> To analyse FELIX data for FELion Instrument </span>\r\n\r\n    </h1>\r\n  \r\n  </AnimateBox>\r\n</section>",
    "<script>\r\n    \r\n    // Importing modules\r\n    import Textfield from '@smui/textfield'\r\n    import HelperText from '@smui/textfield/helper-text/index';\r\n    import Fab, {Icon, Label} from '@smui/fab';\r\n    import Checkbox from '@smui/checkbox';\r\n    import FormField from '@smui/form-field';\r\n    import {createToast, browse} from \"../components/Layout.svelte\"\r\n    import {modalContent, activated} from \"../components/Modal.svelte\"\r\n    import CustomDialog from \"../components/CustomDialog.svelte\"\r\n    //////////////////////////////////////////////////////////////////////////////////\r\n\r\n    const writePowfile = () => {\r\n\r\n        let contents = `${initContent}\\n${powerfileContent}`\r\n\r\n        fs.writeFile(powfile, contents , function(err) {\r\n\r\n            if(err) { return createToast(\"Power file couldn't be saved.\", \"danger\") }\r\n            createToast(\"Power file saved\", \"success\")\r\n        })\r\n    }\r\n    \r\n    async function savefile() {\r\n\r\n        if (location.length == 0) { return openFolder({save:true}) }\r\n\r\n        const overwrite = await fs.existsSync(powfile)\r\n        overwrite ? overwrite_dialog.open() : writePowfile()\r\n    }\r\n\r\n    function openFolder({save=false}={}) {\r\n        browse({dir:true}).then(result=>{\r\n\r\n            if (!result.canceled) {\r\n                location = localStorage[\"powerfile_location\"] = result.filePaths[0]\r\n                createToast(\"Location updated\", \"success\")\r\n\r\n                if (save) savefile()\r\n            }\r\n        }).catch(err=>{$modalContent = err; $activated=true})\r\n    }\r\n\r\n    let powerfileContent = '', felixHz = 10, felixShots = 16, convert = null;\r\n\r\n    let location = localStorage[\"powerfile_location\"] || \"\";\r\n    let overwrite_dialog;\r\n\r\n    let today = new Date();\r\n    const dd = String(today.getDate()).padStart(2, '0')\r\n    const mm = String(today.getMonth() + 1).padStart(2, '0')\r\n    \r\n    const yy = today.getFullYear().toString().substr(2)\r\n    let filename = `${dd}_${mm}_${yy}-#`;\r\n\r\n    $: powfile = path.resolve(location, `${filename}.pow`)\r\n    $: conversion = \"_no_\"\r\n    $: convert ? conversion = \"_\" : conversion = \"_no_\"\r\n    $: initContent = `#POWER file\\n` +\r\n        `# ${felixHz} Hz FELIX\\n` +\r\n        `#SHOTS=${felixShots}\\n` +\r\n        `#INTERP=linear\\n` +\r\n        `#    IN${conversion}UM (if one deletes the no the firs number will be in \\mu m\\n` +\r\n        `# wavelength/cm-1      energy/pulse/mJ\\n`\r\n\r\n    \r\n    const handleOverwrite = (e) => {\r\n        let action = e.detail.action\r\n        if (action === \"Cancel\" || action === \"close\") createToast(\"Powerfile saving cancelled\", \"warning\")\r\n        if (action === \"Yes\") writePowfile()\r\n    }\r\n\r\n</script>\r\n\r\n\r\n<style>\r\n   \r\n    .section {height: 70vh;}\r\n    .container { height: 100%; margin-bottom: 3em; }\r\n    @media only screen and (max-height: 800px) {.section {overflow-y: auto;}}\r\n\r\n</style>\r\n\r\n\r\n<CustomDialog id=\"powerfile-overwrite\" bind:dialog={overwrite_dialog} on:response={handleOverwrite}\r\n    title={\"Overwrite?\"} content={`${filename} already exists. Do you want to overwrite it?`}/>\r\n\r\n<section class=\"section\" id=\"Powerfile\" style=\"display:none\">\r\n    <div class=\"container\" id=\"powfileContainer\">\r\n\r\n        <div style=\"margin-bottom:2em;\">\r\n            <Textfield  style=\"width:90%\" bind:value={location} label=\"Current Location\" />\r\n            <Fab class=\"is-pulled-right\" on:click={openFolder} extended><Label>Browse</Label></Fab>\r\n        </div>\r\n\r\n        <div style=\"margin-bottom:2em;\">\r\n            <Textfield style=\"width:20%\" bind:value={filename} label=\"Filename\" />\r\n            <Textfield style=\"width:20%\" bind:value={felixShots} label=\"FELIX Shots\" on:change={()=>{console.log(felixShots)}}/>\r\n            <Textfield style=\"width:20%\" bind:value={felixHz} label=\"FELIX Hz\" />\r\n            <FormField>\r\n                <Checkbox bind:checked={convert} indeterminate={convert === null} />\r\n                <span slot=\"label\">Convert to &micro;m</span>\r\n            </FormField>\r\n        </div>\r\n\r\n        <Textfield textarea bind:value={powerfileContent} label=\"Powerfile contents\" \r\n            input$aria-controls=\"powercontent_help\" input$aria-describedby=\"powercontent_help\"/>\r\n        <HelperText id=\"powercontent_help\">Enter powerfile measured for {filename}.felix file (wavenumber power-in mJ)</HelperText>\r\n        <Fab style=\"margin:2em 0;\" on:click={savefile} extended><Label>Save</Label></Fab>\r\n    \r\n    </div>\r\n\r\n</section>",
    "<script>\r\n\r\n    //  Importing\r\n    import Layout from \"../components/Layout.svelte\"\r\n    import CustomIconSwitch from \"../components/CustomIconSwitch.svelte\"\r\n    import CustomSelect from \"../components/CustomSelect.svelte\"\r\n    import CustomSwitch from \"../components/CustomSwitch.svelte\"\r\n\r\n    import ReportLayout from \"../components/ReportLayout.svelte\"\r\n    import Textfield from '@smui/textfield'\r\n    import { fly, fade } from 'svelte/transition'\r\n    import {plot, subplot} from \"../js/functions.js\"\r\n\r\n    import {activated, modalContent} from \"../components/Modal.svelte\"\r\n    import {createToast} from \"../components/Layout.svelte\"\r\n    // import {afterUpdate} from \"svelte\"\r\n\r\n    import {Icon} from '@smui/icon-button'\r\n    /////////////////////////////////////////////////////////////////////////\r\n\r\n    // Initialisation\r\n    const filetype = \"scan\", id = \"Timescan\"\r\n    let fileChecked = [];\r\n    let currentLocation = localStorage[`${filetype}_location`] || \"\"\r\n    $: scanfiles = fileChecked.map(file=>path.resolve(currentLocation, file))\r\n    let openShell = false, graphPlotted = false\r\n    let massIndex = 0, timestartIndex = 1, nshots = 10, power = \"21, 21\", resON_Files = \"\", resOFF_Files = \"\"\r\n\r\n    let fullfiles = []\r\n    $: if (currentLocation !== \"\") {\r\n        fullfiles = [\"\", ...fs.readdirSync(currentLocation).filter(file=>file.endsWith(\"scan\"))]\r\n    }\r\n\r\n    $: console.log(`ResOn: ${resON_Files}\\nResOff: ${resOFF_Files}`)\r\n\r\n    // Depletion Row\r\n    let toggleRow = false\r\n    let style = \"width:7em; height:3.5em; margin-right:0.5em\"\r\n\r\n    // Linear log\r\n    let logScale = false;\r\n\r\n    function plotData({e=null, filetype=\"scan\", tkplot=\"run\"}={}){\r\n\r\n        if (fileChecked.length === 0 && filetype === \"scan\") {return createToast(\"No files selected\", \"danger\")}\r\n\r\n        if (filetype === \"general\") {\r\n            if (resOFF_Files === \"\" || resON_Files === \"\") {return createToast(\"No files selected\", \"danger\")}\r\n        }\r\n        \r\n        let pyfileInfo = {\r\n            scan: {pyfile:\"timescan.py\" , args:[...scanfiles, tkplot]},\r\n        \r\n            general: {pyfile:\"depletionscan.py\" , args:[currentLocation,\r\n                resON_Files, resOFF_Files, ...power.split(\",\").map(pow=>parseFloat(pow)), nshots, massIndex, timestartIndex]},\r\n        }\r\n        let {pyfile, args} = pyfileInfo[filetype]\r\n\r\n        if (tkplot == \"plot\") {filetype = \"general\"}\r\n        if (filetype == \"general\") {\r\n            console.log(\"Sending general arguments: \", args)\r\n\r\n            let py = spawn(\r\n\r\n                localStorage[\"pythonpath\"],\r\n                [\"-i\", path.join(localStorage[\"pythonscript\"], pyfile), args],\r\n                \r\n                { detached: true, stdio: 'ignore', shell: openShell }\r\n            )\r\n            py.unref()\r\n            createToast(\"General process sent. Expect an response soon...\")\r\n            return;\r\n        }\r\n\r\n        let target = e.target\r\n\r\n        target.classList.toggle(\"is-loading\")\r\n        if (filetype == \"scan\") {graphPlotted = false}\r\n\r\n        let py;\r\n        try {py = spawn( localStorage[\"pythonpath\"], [path.resolve(localStorage[\"pythonscript\"], pyfile), args] )}\r\n        catch (err) {\r\n            $modalContent = \"Error accessing python. Set python location properly in Settings\"\r\n            $activated = true\r\n            target.classList.toggle(\"is-loading\")\r\n            return\r\n        }\r\n        \r\n        createToast(\"Process Started\")\r\n        py.stdout.on(\"data\", data => {\r\n            console.log(\"Ouput from python\")\r\n            let dataReceived = data.toString(\"utf8\")\r\n            console.log(dataReceived)\r\n        });\r\n\r\n        let error_occured_py = false\r\n\r\n        py.stderr.on(\"data\", err => {\r\n            $modalContent = err\r\n            $activated = true\r\n            error_occured_py = true;\r\n        });\r\n\r\n        py.on(\"close\", () => {\r\n            if (!error_occured_py) {\r\n\r\n                try {\r\n                    let dataFromPython = fs.readFileSync(path.join(localStorage[\"pythonscript\"], \"data.json\"))\r\n                    dataFromPython = JSON.parse(dataFromPython.toString(\"utf-8\"))\r\n                    console.log(dataFromPython)\r\n                    if (filetype==\"scan\") {\r\n                       fileChecked.forEach(file=>{\r\n                            plot(`Timescan Plot: ${file}`, \"Time (in ms)\", \"Counts\", dataFromPython[file], `${file}_tplot`)\r\n                       })\r\n                    } \r\n\r\n                    createToast(\"Graph plotted\", \"success\")\r\n                    graphPlotted = true\r\n\r\n                } catch (err) { $modalContent = err; $activated = true }\r\n\r\n            }\r\n            console.log(\"Process closed\")\r\n            target.classList.toggle(\"is-loading\")\r\n        })\r\n    }\r\n\r\n    // Linearlog check\r\n    const linearlogCheck = (event) => {\r\n        let layout = { yaxis: { title: \"Counts\", type: logScale ? \"log\" : null } }\r\n        if(graphPlotted) {\r\n\r\n            fileChecked.forEach(file => {\r\n                let tplot = file + \"_tplot\";\r\n                Plotly.relayout(tplot, layout);\r\n            })\r\n        }\r\n    };\r\n\r\n</script>\r\n\r\n<style>\r\n    .timescan_buttonContainer {min-height: 5em;}\r\n    .button {margin-right: 0.5em;}\r\n    .buttonRow {margin-bottom: 1em!important; align-items: center;}\r\n\r\n    * :global(.mdc-select__native-control option) {color: black}\r\n    .active {display: flex!important;}\r\n    .hide {display: none;}\r\n    .align {display: flex; align-items: center;}\r\n\r\n</style>\r\n\r\n<Layout {filetype} {id} bind:currentLocation bind:fileChecked>\r\n\r\n    <div class=\"timescan_buttonContainer\" slot=\"buttonContainer\">\r\n\r\n        <div class=\"content align buttonRow\">\r\n            <button class=\"button is-link\" on:click=\"{(e)=>plotData({e:e})}\">Timescan Plot</button>\r\n            <button class=\"button is-link\" on:click=\"{()=>{toggleRow = !toggleRow}}\">Depletion Plot</button>\r\n            <button class=\"button is-link\" on:click=\"{(e)=>plotData({e:e, filetype:\"scan\", tkplot:\"plot\"})}\">Open in Matplotlib</button>\r\n            <CustomIconSwitch style=\"padding:0;\" bind:toggler={openShell} icons={[\"settings_ethernet\", \"code\"]}/>\r\n            <CustomSwitch style=\"margin: 0 1em;\" on:change={linearlogCheck} bind:selected={logScale} label=\"Log\"/>\r\n        </div>\r\n\r\n        <div class=\"animated fadeIn hide buttonRow\" class:active={toggleRow} >\r\n            <CustomSelect style=\"width:12em; height:3.5em; margin-right:0.5em\" bind:picked={resON_Files} label=\"ResOn\" options={fullfiles}/>\r\n            <CustomSelect style=\"width:12em; height:3.5em; margin-right:0.5em\" bind:picked={resOFF_Files} label=\"ResOFF\" options={fullfiles}/>\r\n            <Textfield {style} bind:value={power} label=\"Power (ON, OFF)\" />\r\n            <Textfield type=\"number\" {style} bind:value={nshots} label=\"FELIX Hz\" />\r\n            <Textfield type=\"number\" {style} bind:value={massIndex} label=\"Mass Index\" />\r\n            <Textfield type=\"number\" {style} bind:value={timestartIndex} label=\"Time Index\" />\r\n            <button class=\"button is-link\" on:click=\"{(e)=>plotData({e:e, filetype:\"general\"})}\">Submit</button>\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <div style=\"margin-right: 1em;\" slot=\"plotContainer\">\r\n        <div id=\"tplotContainer\">\r\n            {#each fileChecked as scanfile}\r\n                <div id=\"{scanfile}_tplot\" style=\"padding-bottom:1em\" />\r\n            {/each}\r\n\r\n        </div>\r\n\r\n        <div class=\"animated fadeIn hide\" class:active={graphPlotted} style=\"flex-direction:column \">\r\n            <ReportLayout bind:currentLocation id=\"scanreport\", plotID={[`${fileChecked[0]}_tplot`]}/>\r\n        </div>\r\n\r\n\r\n    </div>\r\n    \r\n</Layout>",
    "<script>\r\n    import Textfield from '@smui/textfield'\r\n    import CustomSwitch from '../components/CustomSwitch.svelte'\r\n\r\n    // Fundamental constants\r\n    $: c = 299792458 // m/s\r\n    $: plank_constant = 6.62607004e-34 // Js\r\n    $: boltzman_constant = 1.380649e-23 // J/K\r\n    $: electron_charge = 1.602176565e-19 // C or eV = J\r\n\r\n    // eV/q = h.c/lam = h.f = KB.T = h.c.cm_1\r\n\r\n    $: hz = 1e12.toExponential(4);\r\n    $: eV = (plank_constant/electron_charge) * hz;\r\n    $: kelvin = (plank_constant/boltzman_constant) * hz;\r\n    $: cm_1 = hz/(c*1e2);\r\n\r\n    $: um = (c/hz)*1e+6;\r\n\r\n    $: ghz = hz*1e-9\r\n    $: nm = (c/hz)*1e+9\r\n    $: J = plank_constant * hz\r\n    \r\n    $: edit_constants = false\r\n    $: edit_numberDensity_constants = false\r\n\r\n    // Number density\r\n\r\n    $: pq1_before = 1e-8\r\n    $: pq1_after = 1e-5\r\n    $: ptrap_before = 1e-10\r\n    $: ptrap_after = 1e-5\r\n    $: temperature = 5\r\n    $: calibration_factor = 205.54\r\n\r\n    $: rt = 300\r\n\r\n    $: ndensity_temp = calibration_factor/(boltzman_constant*1e4*rt**0.5) * ((pq1_after - pq1_before) / temperature**0.5)\r\n    $: ndensity = ndensity_temp.toExponential(4)\r\n\r\n</script>\r\n\r\n<style>\r\n\r\n    .box { background-color: #6a50ad8a; overflow-y: auto; height: calc(100vh - 12em);}\r\n\r\n    * :global(.mdc-text-field--disabled .mdc-text-field__input) {color: #dbdbdb;}\r\n    * :global(.mdc-text-field--disabled .mdc-floating-label) {color: #dbdbdb;}\r\n\r\n    .unit_converter_column {margin-right: 1em;}\r\n\r\n</style>\r\n\r\n<section class=\"animated fadeIn section\" id=\"Misc\" style=\"display:none\">\r\n\r\n    <div class=\"columns is-multiline\" id=\"unit_conversion_table\">\r\n\r\n        <div class=\"column box is-4 unit_converter_column\">\r\n\r\n          <div class=\"title\">Energy Conversion</div>\r\n\r\n          <hr>\r\n\r\n          <Textfield style=\"width:25%; margin-right:0.5em;\"  bind:value={hz} label=\"Hz\" />\r\n          <Textfield style=\"width:25%; margin-right:0.5em;\" bind:value={ghz} on:change=\"{()=>hz=(ghz)*1e+9}\" label=\"GHz\" />\r\n          <Textfield style=\"width:25%; margin-right:0.5em;\" bind:value={um} on:change=\"{()=>hz=(c/um)*1e6}\" label=\"Micron\" />\r\n          <Textfield style=\"width:25%; margin-right:0.5em;\" bind:value={cm_1} on:change=\"{()=>hz=cm_1*c*1e2}\" label=\"cm-1\" />\r\n          <Textfield style=\"width:25%; margin-right:0.5em;\" bind:value={kelvin} on:change=\"{()=>hz=(boltzman_constant/plank_constant)*kelvin}\" label=\"Kelvin\" />\r\n          <Textfield style=\"width:25%; margin-right:0.5em;\" bind:value={eV} on:change=\"{()=>hz=(electron_charge/plank_constant)*eV}\" label=\"eV\" />\r\n          <Textfield style=\"width:25%; margin-right:0.5em;\" bind:value={J} on:change=\"{()=>hz=(J/plank_constant)}\" label=\"Joule\" />\r\n          <Textfield style=\"width:25%; margin-right:0.5em;\" bind:value={nm} on:change=\"{()=>hz=(c/nm)*1e9}\" label=\"nm\" />\r\n\r\n          <hr>\r\n\r\n          <div class=\"subtitle is-pulled-left\">Fundamental constants</div>\r\n          <CustomSwitch style=\"margin: 0 1em;\" bind:selected={edit_constants} label=\"Edit\"/>\r\n          <Textfield style=\"width:90%; margin-right:0.5em;\" disabled={!edit_constants} bind:value={c} label=\"Speed of light in vaccum\" />\r\n          <Textfield style=\"width:90%; margin-right:0.5em;\" disabled={!edit_constants} bind:value={boltzman_constant} label=\"Boltzman constant\" />\r\n          <Textfield style=\"width:90%; margin-right:0.5em;\" disabled={!edit_constants} bind:value={plank_constant} label=\"Plank's constant\" />\r\n          <Textfield style=\"width:90%; margin-right:0.5em;\" disabled={!edit_constants} bind:value={electron_charge} label=\"Electric charge\" />\r\n        </div>\r\n\r\n        <div class=\"column box is-4 unit_converter_column\">\r\n          \r\n            <div class=\"title\">Number Density Calculation</div>\r\n            <hr>\r\n\r\n            <div class=\"subtitle\">Main Chamber Press.</div>\r\n            <Textfield style=\"width:90%; margin-right:0.5em;\" bind:value={pq1_before} label=\"Before letting in gas\" />\r\n            <Textfield style=\"width:90%; margin-right:0.5em;\" bind:value={pq1_after} label=\"After letting in gas\" />\r\n            <Textfield style=\"width:90%; margin-right:0.5em;\" bind:value={temperature} label=\"Temperature\" />\r\n            <Textfield style=\"width:90%; margin-right:0.5em;\" disabled={true} bind:value={ndensity} label=\"Number density\" />\r\n            <hr>\r\n\r\n            <CustomSwitch style=\"margin: 0 1em;\" bind:selected={edit_numberDensity_constants} label=\"Edit\"/>\r\n\r\n            <Textfield style=\"width:90%; margin-right:0.5em;\" disabled={!edit_numberDensity_constants} bind:value={calibration_factor} label=\"Calibration Factor\" />\r\n            <Textfield style=\"width:90%; margin-right:0.5em;\" disabled={!edit_numberDensity_constants} bind:value={rt} label=\"Chamber Temperature (RT)\" />\r\n          \r\n        </div>\r\n        \r\n    </div>\r\n\r\n</section>",
    "<script>\r\n\timport Tab, {Icon, Label} from '@smui/tab';\r\n\timport TabBar from '@smui/tab-bar';\r\n\timport Button from '@smui/button';\r\n\timport {onMount} from \"svelte\"\r\n\t\r\n\texport let navItems;\r\n\t\r\n\tlet active = 'Home';\r\n\tconst navigate = () =>{navItems.forEach(item=> item == active ? showpage(item) : hidepage(item))}\r\n\tonMount(()=>{showpage(\"navbar\");})\r\n</script>\r\n\r\n<style lang=\"scss\">#navbar {\n  width: 100vw;\n  margin-bottom: 0;\n  padding: 0; }\n</style>\r\n\r\n<div class=\"box animated fadeInDown\" id=\"navbar\" style=\"display:none\" on:click={navigate}>\r\n\t<TabBar tabs={navItems} let:tab bind:active>\r\n\t\t<Tab {tab}> <Label>{tab}</Label> </Tab>\r\n\t</TabBar>\r\n</div>\r\n",
    "<script context=\"module\">\r\n    export const createToast = (msg, type=\"primary\") => Toast.create({ message: msg, position:\"is-top\", type:`is-${type}`})\r\n    export function browse({filetype=\"\", dir=true, defaultPath=\"\"}={}) {\r\n        return new Promise((resolve, reject)=>{\r\n            const mainWindow = remote.getCurrentWindow()\r\n            let type;\r\n            dir ? type = \"openDirectory\" : type = \"openFile\"\r\n\r\n            const options = {\r\n                filters: [\r\n                    { name: filetype, extensions: [`*${filetype}`] },\r\n                    { name: 'All Files', extensions: ['*'] }\r\n\r\n                ],\r\n                properties: [type, \"multiSelections\"],\r\n                // defaultPath: defaultPath\r\n                \r\n            }\r\n\r\n            if (process.versions.electron >= \"7\") {\r\n                remote.dialog.showOpenDialog(mainWindow, options)\r\n                .then(result => {\r\n                    console.log(result.canceled)\r\n                    console.log(result.filePaths)\r\n                    resolve(result)\r\n\r\n                }).catch(err => {\r\n\r\n                    createToast(\"Couldn't open folder\", \"danger\")\r\n                    reject(err) })\r\n            } else {\r\n                let result = {}\r\n                remote.dialog.showOpenDialog(null, options, location => {\r\n                location === undefined ? result = {canceled:true, filePaths:[]}: result = {canceled:false, filePaths:location}\r\n\r\n                console.log(result.canceled)\r\n                console.log(result.filePaths)\r\n                resolve(result)\r\n\r\n            })\r\n            }\r\n\r\n            \r\n                \r\n        })\r\n    }\r\n\r\n</script>\r\n\r\n<script>\r\n    \r\n    import IconButton, {Icon} from '@smui/icon-button';\r\n    import { fly, slide } from 'svelte/transition';\r\n    import Textfield from '@smui/textfield';\r\n    import {onMount} from \"svelte\";\r\n    import { Toast } from 'svelma'\r\n    import FileBrowser from \"./FileBrowser.svelte\"\r\n    \r\n    ////////////////////////////////////////////////////////////////////////////\r\n    export let id, fileChecked=[], filetype = \"felix\"\r\n    export let currentLocation = localStorage[`${filetype}_location`] || \"\";\r\n\r\n    function browse_folder() {\r\n        browse({dir:true}).then(result=>{\r\n\r\n            if (!result.canceled) {\r\n                currentLocation= localStorage[`${filetype}_location`] = result.filePaths[0]\r\n            }\r\n        })\r\n    }\r\n    let toggleBrowser = true;\r\n\r\n</script>\r\n\r\n<style lang=\"scss\">.filebrowser, .fileContainer {\n  background-image: url(./assets/css/intro.svg);\n  height: calc(100vh - 7em); }\n\n.plotContainer {\n  max-height: calc(100vh - 25em);\n  overflow-y: auto;\n  padding-bottom: 5em; }\n\n.filebrowser {\n  padding-left: 2em;\n  padding-top: 1em;\n  background-color: #6a50ad59;\n  border-radius: 0; }\n\n.fileContainer {\n  margin: 0 2em;\n  padding-bottom: 5rem;\n  width: calc(70vw - 2em); }\n\n* :global(.box) {\n  background-color: #654ca25c; }\n\n* :global(.mdc-list-item) {\n  height: 2em; }\n\n* :global(.mdc-switch.mdc-switch--checked .mdc-switch__thumb, .mdc-switch.mdc-switch--checked .mdc-switch__track) {\n  background-color: #ffffff; }\n\n* :global(.material-icons) {\n  margin-right: 0.2em;\n  cursor: pointer; }\n\n* :global(.align) {\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap; }\n\n* :global(.center) {\n  justify-content: center; }\n\n* :global(.gap) {\n  margin-right: 2em; }\n\n.buttonContainer {\n  max-height: 20em;\n  overflow-y: auto; }\n\n.box {\n  border-radius: 0; }\n\n.container {\n  min-height: calc(100vh - 10em); }\n\n.plotContainer > div {\n  margin-top: 1em; }\n</style>\r\n\r\n<section {id} style=\"display:none\" class=\"animated fadeIn\">\r\n\r\n    <div class=\"columns\">\r\n\r\n        {#if toggleBrowser}\r\n            <div class=\"column is-one-fifth-widescreen is-one-quarter-desktop box filebrowser adjust-right\" transition:fly=\"{{ x: -100, duration: 500 }}\">\r\n                <FileBrowser bind:currentLocation {filetype} bind:fileChecked />\r\n            </div>\r\n        {/if}\r\n\r\n        <div class=\"column fileContainer\">\r\n            <div class=\"container button-plot-container box\">\r\n\r\n                <div class=\"align\">\r\n                    <IconButton  toggle bind:pressed={toggleBrowser}>\r\n                        <Icon class=\"material-icons\" on>menu_open</Icon>\r\n                        <Icon class=\"material-icons\" >menu</Icon>\r\n                    </IconButton>\r\n                    <button class=\"button is-link gap\" on:click={browse_folder}>Browse</button>\r\n                    <Textfield style=\"margin-bottom:1em;\" bind:value={currentLocation} label=\"Current location\" />\r\n                </div>\r\n\r\n                <div class=\"align buttonContainer\"> <slot name=\"buttonContainer\" /></div>\r\n                <div class=\"plotContainer\"> <slot name=\"plotContainer\" /> </div>\r\n                \r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n</section>",
    "<script>\r\n\r\n    //  Importing\r\n    import Layout from \"../components/Layout.svelte\"\r\n    import CustomIconSwitch from \"../components/CustomIconSwitch.svelte\"\r\n    import CustomSelect from \"../components/CustomSelect.svelte\"\r\n    import CustomSwitch from \"../components/CustomSwitch.svelte\"\r\n\r\n    import ReportLayout from \"../components/ReportLayout.svelte\"\r\n    import Textfield from '@smui/textfield'\r\n    import { fly, fade } from 'svelte/transition'\r\n    import {plot, subplot} from \"../js/functions.js\"\r\n\r\n    import {activated, modalContent} from \"../components/Modal.svelte\"\r\n    import {createToast} from \"../components/Layout.svelte\"\r\n    import {afterUpdate} from \"svelte\"\r\n\r\n    import {Icon} from '@smui/icon-button'\r\n    /////////////////////////////////////////////////////////////////////////\r\n\r\n    // Initialisation\r\n    const filetype = \"mass\", id = \"Masspec\"\r\n    let fileChecked = [];\r\n    let currentLocation = localStorage[`${filetype}_location`] || \"\"\r\n    $: massfiles = fileChecked.map(file=>path.resolve(currentLocation, file))\r\n    let openShell = false, graphPlotted = false\r\n\r\n    // Find peaks\r\n    let toggleRow1 = false\r\n\r\n    let selected_file = \"\", peak_prominance = 3, peak_width = 2, peak_height = 40;\r\n    const style = \"width:7em; height:3.5em; margin-right:0.5em\"\r\n\r\n    // NIST \r\n    let toggleRow2 = false, nist_molecule = localStorage[\"nist_molecule\"] || \"\", nist_formula = localStorage[\"nist_formula\"] || \"\"\r\n    const style2 = \"width:12em; height:3em; margin-right:0.5em\"\r\n\r\n    $: nist_molecule_name = `Name=${nist_molecule}`\r\n    $: nist_molecule_formula = `Formula=${nist_formula}`\r\n    let nist_url = localStorage[\"nist_url\"] || \"https://webbook.nist.gov/cgi/cbook.cgi?Name=&Units=SI&Mask=200#Mass-Spec\"\r\n\r\n    const set_nist_url = (format=\"\") => {\r\n        let fmt;\r\n        format == \"by_name\" ? fmt = nist_molecule_name : fmt = nist_molecule_formula\r\n        nist_url = `https://webbook.nist.gov/cgi/cbook.cgi?${fmt}&Units=SI&Mask=200#Mass-Spec`\r\n        localStorage[\"nist_url\"] = nist_url\r\n        localStorage[\"nist_formula\"] =  nist_formula\r\n        localStorage[\"nist_molecule\"] = nist_molecule\r\n    }\r\n\r\n    // Linear log\r\n    let logScale = true;\r\n\r\n    // Functions\r\n    function plotData({e=null, filetype=\"mass\"}={}){\r\n\r\n        if (fileChecked.length === 0) {return createToast(\"No files selected\", \"danger\")}\r\n\r\n        let pyfileInfo = {\r\n            mass: {pyfile:\"mass.py\" , args:[...massfiles, \"run\"]},\r\n            general: {pyfile:\"mass.py\" , args:[...massfiles, \"plot\"]},\r\n            find_peaks: {pyfile:\"find_peaks_masspec.py\" , args:[path.resolve(currentLocation, selected_file), peak_prominance, peak_width, peak_height]},\r\n\r\n        }\r\n        \r\n        let {pyfile, args} = pyfileInfo[filetype]\r\n\r\n        if (filetype == \"general\") {\r\n            console.log(\"Sending general arguments: \", args)\r\n            let py = spawn(\r\n                localStorage[\"pythonpath\"],\r\n                [\"-i\", path.join(localStorage[\"pythonscript\"], pyfile), args],\r\n                { detached: true, stdio: 'ignore', shell: openShell }\r\n            )\r\n            py.unref()\r\n            createToast(\"General process sent. Expect an response soon...\")\r\n            return;\r\n        }\r\n\r\n        let target = e.target\r\n        target.classList.toggle(\"is-loading\")\r\n\r\n        if (filetype == \"mass\") {graphPlotted = false}\r\n        \r\n        let py;\r\n\r\n        try {py = spawn( localStorage[\"pythonpath\"], [path.resolve(localStorage[\"pythonscript\"], pyfile), args] )}\r\n        catch (err) {\r\n            $modalContent = \"Error accessing python. Set python location properly in Settings\"\r\n            $activated = true\r\n            target.classList.toggle(\"is-loading\")\r\n            return\r\n        }\r\n        \r\n        createToast(\"Process Started\")\r\n        py.stdout.on(\"data\", data => {\r\n            console.log(\"Ouput from python\")\r\n            let dataReceived = data.toString(\"utf8\")\r\n            console.log(dataReceived)\r\n        });\r\n\r\n        let error_occured_py = false\r\n\r\n        py.stderr.on(\"data\", err => {\r\n            $modalContent = err\r\n            $activated = true\r\n            error_occured_py = true;\r\n        });\r\n\r\n        py.on(\"close\", () => {\r\n            if (!error_occured_py) {\r\n\r\n                try {\r\n                    let dataFromPython = fs.readFileSync(path.join(localStorage[\"pythonscript\"], \"data.json\"))\r\n                    dataFromPython = JSON.parse(dataFromPython.toString(\"utf-8\"))\r\n                    console.log(dataFromPython)\r\n                    if (filetype==\"mass\") {\r\n                        plot(\"Mass spectrum\", \"Mass [u]\", \"Counts\", dataFromPython, \"mplot\", \"mass\")\r\n                    } else if (filetype ==\"find_peaks\") {\r\n\r\n                        Plotly.relayout(\"mplot\", { yaxis: { title: \"Counts\", type: \"\" } })\r\n                        Plotly.relayout(\"mplot\", { annotations: [] })\r\n                        Plotly.relayout(\"mplot\", { annotations: dataFromPython[\"annotations\"] })\r\n                        Plotly.relayout(\"mplot\", { yaxis: { title: \"Counts\", type: \"log\" } })\r\n\r\n                    }\r\n\r\n                    createToast(\"Graph plotted\", \"success\")\r\n                    graphPlotted = true\r\n\r\n                } catch (err) { $modalContent = err; $activated = true }\r\n\r\n            }\r\n            console.log(\"Process closed\")\r\n            target.classList.toggle(\"is-loading\")\r\n        })\r\n    }\r\n\r\n    // Linearlog check\r\n\r\n    const linearlogCheck = (event) => {\r\n        let layout = { yaxis: { title: \"Counts\", type: logScale ? \"log\" : null } }\r\n        if(graphPlotted) Plotly.relayout(\"mplot\", layout)\r\n    };\r\n\r\n</script>\r\n\r\n<style>\r\n    .masspec_buttonContainer {min-height: 5em;}\r\n    .button {margin-right: 0.5em;}\r\n    .buttonRow {margin-bottom: 1em!important; align-items: center;}\r\n\r\n    * :global(.mdc-select__native-control option) {color: black}\r\n    .active {display: flex!important;}\r\n    .hide {display: none;}\r\n    .align {display: flex; align-items: center;}\r\n</style>\r\n\r\n\r\n<Layout {filetype} {id} bind:currentLocation bind:fileChecked>\r\n    <div class=\"masspec_buttonContainer\" slot=\"buttonContainer\">\r\n\r\n        <div class=\"content align buttonRow\">\r\n            <button class=\"button is-link\" on:click=\"{(e)=>plotData({e:e})}\">Masspec Plot</button>\r\n            <button class=\"button is-link\" on:click=\"{()=>{toggleRow1 = !toggleRow1}}\">Find Peaks</button>\r\n            <button class=\"button is-link\" on:click=\"{()=>{toggleRow2 = !toggleRow2}}\">NIST Webbook</button>\r\n            <button class=\"button is-link\" on:click=\"{(e)=>plotData({e:e, filetype:\"general\"})}\">Open in Matplotlib</button>\r\n            <CustomIconSwitch style=\"padding:0;\" bind:toggler={openShell} icons={[\"settings_ethernet\", \"code\"]}/>\r\n            <CustomSwitch style=\"margin: 0 1em;\" on:change={linearlogCheck} bind:selected={logScale} label=\"Log\"/>\r\n        </div>\r\n\r\n        <div class=\"animated fadeIn hide buttonRow\" class:active={toggleRow1} >\r\n            <CustomSelect style=\"width:12em; height:3.5em; margin-right:0.5em\" bind:picked={selected_file} label=\"Filename\" options={[\"\", ...fileChecked]}/>\r\n            <Textfield type=\"number\" {style} on:change=\"{(e)=>plotData({e:e, filetype:\"find_peaks\"})}\" bind:value={peak_prominance} label=\"Prominance\" />\r\n            <Textfield type=\"number\" {style} on:change=\"{(e)=>plotData({e:e, filetype:\"find_peaks\"})}\" bind:value={peak_width} label=\"Width\" />\r\n            <Textfield type=\"number\" {style} on:change=\"{(e)=>plotData({e:e, filetype:\"find_peaks\"})}\" bind:value={peak_height} label=\"Height\" />\r\n            <button class=\"button is-link\" on:click=\"{(e)=>plotData({e:e, filetype:\"find_peaks\"})}\">Get Peaks</button>\r\n            <button class=\"button is-danger\" on:click=\"{(e)=>window.Plotly.relayout(\"mplot\", { annotations: [] })}\">Clear</button>\r\n        </div>\r\n\r\n        <div class=\"animated fadeIn hide buttonRow\" class:active={toggleRow2}>\r\n            <Textfield {style2} on:change=\"{()=>set_nist_url(\"by_name\")}\" bind:value={nist_molecule} label=\"Molecule Name\" />\r\n            <Textfield {style2} on:change={set_nist_url} bind:value={nist_formula} label=\"Molecule Formula\" />\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <div style=\"margin-right: 1em;\" slot=\"plotContainer\">\r\n\r\n        <div id=\"mplot\"></div>\r\n        <div class=\"animated fadeIn hide\" class:active={graphPlotted} style=\"flex-direction:column \"><ReportLayout bind:currentLocation id=\"masspecreport\", plotID={[\"mplot\"]}/></div>\r\n\r\n        <div class=\"hide animated fadeIn\" class:active={toggleRow2} style=\"margin-top: 1em; display:none; flex-direction:column;\">\r\n            <div style=\"margin:1em;\">\r\n                <Icon on:click=\"{()=>window.nist_webview.goToIndex(0)}\" class=\"material-icons hvr-glow\">home</Icon>\r\n\r\n                <Icon on:click=\"{()=>window.nist_webview.reload()}\" class=\"material-icons hvr-glow\">refresh</Icon>\r\n                <Icon on:click=\"{()=>{if(window.nist_webview.canGoBack()) {window.nist_webview.goBack()}}}\" class=\"material-icons hvr-glow\">arrow_left</Icon>\r\n                <Icon on:click=\"{()=>{if(window.nist_webview.canGoForward()) {window.nist_webview.goForward()}}}\" class=\"material-icons hvr-glow\">arrow_right</Icon>\r\n            </div>\r\n            <div class=\"\">\r\n                <webview src={nist_url} id=\"nist_webview\" style=\"height: 50vh; padding-bottom:3em;\"></webview>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n\r\n</Layout>",
    "<script>\r\n\r\n    //  Importing\r\n    import Layout from \"../components/Layout.svelte\"\r\n    import CustomIconSwitch from \"../components/CustomIconSwitch.svelte\"\r\n    import CustomSelect from \"../components/CustomSelect.svelte\"\r\n    import CustomSwitch from \"../components/CustomSwitch.svelte\"\r\n\r\n    import ReportLayout from \"../components/ReportLayout.svelte\"\r\n    import Textfield from '@smui/textfield'\r\n    import { fly, fade } from 'svelte/transition'\r\n    import {plot, subplot} from \"../js/functions.js\"\r\n\r\n    import {activated, modalContent} from \"../components/Modal.svelte\"\r\n    import {createToast} from \"../components/Layout.svelte\"\r\n    // import {afterUpdate} from \"svelte\"\r\n\r\n    import {Icon} from '@smui/icon-button'\r\n    /////////////////////////////////////////////////////////////////////////\r\n\r\n    // Initialisation\r\n    const filetype = \"thz\", id = \"THz\"\r\n    let fileChecked = [];\r\n    let currentLocation = localStorage[`${filetype}_location`] || \"\"\r\n    $: thzfiles = fileChecked.map(file=>path.resolve(currentLocation, file))\r\n    let openShell = false, graphPlotted = false\r\n    let delta = 1, gamma = 0\r\n\r\n    let B0=0, D0=0, H0=0, temp=300, totalJ=20\r\n\r\n    // Depletion Row\r\n    let toggleRow = false\r\n    const style = \"width:7em; height:3.5em; margin-right:0.5em\"\r\n    const btnClass = \"button is-link animated\"\r\n\r\n    const plotStyle = [\"\", \"lines\", \"markers\", \"lines+markers\"]\r\n\r\n    let plotStyleSelected = plotStyle[3], plotFill = true;\r\n\r\n    let binData = false;\r\n\r\n    const changePlotStyle = () => { Plotly.restyle(\"thzPlot\", {mode:plotStyleSelected, fill: plotFill ? \"tozeroy\" : \"\"})}\r\n    function plotData({e=null, filetype=\"thz\", tkplot=\"run\", justPlot=false }={}){\r\n\r\n        if (fileChecked.length === 0) {return createToast(\"No files selected\", \"danger\")}\r\n\r\n        let pyfileInfo = {\r\n            thz: {pyfile:\"thz_scan.py\" , args:[...thzfiles, binData, delta, tkplot, gamma, justPlot]},\r\n            boltzman: {pyfile:\"boltzman.py\" , args:[currentLocation, B0, D0, H0, temp, totalJ, tkplot]},\r\n        }\r\n        let {pyfile, args} = pyfileInfo[filetype]\r\n        if (tkplot == \"plot\") {filetype = \"general\"}\r\n\r\n        if (filetype == \"general\") {\r\n            console.log(\"Sending general arguments: \", args)\r\n            let py = spawn(\r\n                localStorage[\"pythonpath\"],\r\n                [\"-i\", path.join(localStorage[\"pythonscript\"], pyfile), args],\r\n                { detached: true, stdio: 'ignore', shell: openShell }\r\n            )\r\n            py.unref()\r\n            createToast(\"General process sent. Expect an response soon...\")\r\n            return;\r\n        }\r\n\r\n        let target = e.target\r\n        target.classList.toggle(\"is-loading\")\r\n        if (filetype == \"scan\") {graphPlotted = false}\r\n        \r\n        let py;\r\n        try {py = spawn( localStorage[\"pythonpath\"], [path.resolve(localStorage[\"pythonscript\"], pyfile), args] )}\r\n\r\n        catch (err) {\r\n            $modalContent = \"Error accessing python. Set python location properly in Settings\"\r\n            $activated = true\r\n            target.classList.toggle(\"is-loading\")\r\n            return\r\n        }\r\n        \r\n        createToast(\"Process Started\")\r\n        py.stdout.on(\"data\", data => {\r\n            console.log(\"Ouput from python\")\r\n            let dataReceived = data.toString(\"utf8\")\r\n            console.log(dataReceived)\r\n        });\r\n\r\n        let error_occured_py = false\r\n\r\n        py.stderr.on(\"data\", err => {\r\n            $modalContent = err\r\n            $activated = true\r\n            error_occured_py = true;\r\n            target.style.backgroundColor=\"#ff3860\"\r\n            target.classList.add(\"shake\")\r\n        });\r\n\r\n        py.on(\"close\", () => {\r\n\r\n            if (!error_occured_py) {\r\n\r\n                try {\r\n                    let dataFromPython = fs.readFileSync(path.join(localStorage[\"pythonscript\"], \"data.json\"))\r\n                    dataFromPython = JSON.parse(dataFromPython.toString(\"utf-8\"))\r\n                    console.log(dataFromPython)\r\n\r\n                    if (filetype==\"thz\") {\r\n                       plot(`THz Scan`, \"Frequency (GHz)\", \"Depletion (%)\", dataFromPython, \"thzPlot\");\r\n    \r\n                        let lines = [];\r\n\r\n                        for (let x in dataFromPython[\"shapes\"]) { lines.push(dataFromPython[\"shapes\"][x]) }\r\n                        let layout_update = {\r\n                            shapes: lines\r\n                        }\r\n                        Plotly.relayout(\"thzPlot\", layout_update)\r\n                    } else if (filetype == \"boltzman\") {\r\n                        plot(`Boltzman Distribution`, \"Rotational levels (J)\", \"Probability (%)\", dataFromPython, \"boltzman_plot\");\r\n                    }\r\n                    createToast(\"Graph plotted\", \"success\")\r\n                    graphPlotted = true\r\n\r\n                    target.style.backgroundColor=\"#09814a\"\r\n                    target.classList.add(\"bounce\")\r\n\r\n                } catch (err) { \r\n                    $modalContent = err\r\n                    $activated = true \r\n\r\n                    target.style.backgroundColor=\"#ff3860\"\r\n                    target.classList.add(\"shake\")\r\n                 }\r\n\r\n            }\r\n\r\n            console.log(\"Process closed\")\r\n            target.classList.toggle(\"is-loading\")\r\n            setTimeout(()=>{\r\n                target.style.backgroundColor=\"\"\r\n                if (target.classList.contains(\"bounce\")) target.classList.remove(\"bounce\")\r\n                if (target.classList.contains(\"shake\")) target.classList.remove(\"shake\")\r\n            }, 2000)\r\n        })\r\n    }\r\n\r\n\r\n</script>\r\n\r\n<style>\r\n\r\n    .thz_buttonContainer {min-height: 5em;}\r\n    .button {margin-right: 0.5em;}\r\n    .buttonRow {margin-bottom: 1em!important; align-items: center;}\r\n\r\n    .active {display: flex!important;}\r\n    .hide {display: none;}\r\n    .align {display: flex; align-items: center;}\r\n    * :global(.mdc-select__native-control option) {color: black}\r\n\r\n</style>\r\n\r\n<Layout {filetype} {id} bind:currentLocation bind:fileChecked>\r\n\r\n    <div class=\"thz_buttonContainer\" slot=\"buttonContainer\">\r\n\r\n        <div class=\"content align buttonRow\">\r\n            <button class=\"{btnClass}\" on:click=\"{(e)=>{plotData({e:e, justPlot:true})}}\">Plot</button>\r\n\r\n            <CustomSwitch bind:selected={binData} label=\"Bin\" style=\"margin:0 1em;\"/>\r\n            <button class=\"{btnClass}\" on:click=\"{(e)=>{plotData({e:e})}}\">Fit</button>\r\n            <button class=\"{btnClass}\" on:click=\"{(e)=>plotData({e:e, tkplot:\"plot\"})}\">Open in Matplotlib</button>\r\n            <CustomIconSwitch style=\"padding:0;\" bind:toggler={openShell} icons={[\"settings_ethernet\", \"code\"]}/>\r\n            <button class=\"{btnClass}\" on:click=\"{()=>{toggleRow = !toggleRow}}\">Boltzman</button>\r\n            <Textfield type=\"number\" {style} on:change=\"{(e)=>plotData({e:e})}\" bind:value={delta} label=\"Delta\" />\r\n            <Textfield type=\"number\" {style} on:change=\"{(e)=>plotData({e:e})}\" bind:value={gamma} label=\"Gamma\" />\r\n            <div class=\"animated fadeIn hide\" class:active={graphPlotted} on:change={changePlotStyle}>\r\n\r\n                <CustomSelect options={plotStyle} bind:picked={plotStyleSelected} label=\"Plot Style\"/>\r\n                <CustomSwitch bind:selected={plotFill} label=\"Fill area\"/>\r\n            </div>\r\n\r\n        </div>\r\n\r\n        <div class=\"animated fadeIn hide buttonRow\" class:active={toggleRow} >\r\n            <Textfield {style} on:change=\"{(e)=>plotData({e:e, filetype:\"boltzman\"})}\" bind:value={B0} label=\"B0 (MHz)\" />\r\n            <Textfield {style} on:change=\"{(e)=>plotData({e:e, filetype:\"boltzman\"})}\" bind:value={D0} label=\"D0 (MHz)\" />\r\n            <Textfield {style} on:change=\"{(e)=>plotData({e:e, filetype:\"boltzman\"})}\" bind:value={H0} label=\"H0 (MHz)\" />\r\n            <Textfield type=\"number\" {style} on:change=\"{(e)=>plotData({e:e, filetype:\"boltzman\"})}\" bind:value={temp} label=\"Temp.\" />\r\n            <Textfield type=\"number\" {style} on:change=\"{(e)=>plotData({e:e, filetype:\"boltzman\"})}\" bind:value={totalJ} label=\"Total J\" />\r\n            <button class=\"{btnClass}\" on:click=\"{(e)=>plotData({e:e, filetype:\"boltzman\"})}\">Submit</button>\r\n            <button class=\"{btnClass}\" on:click=\"{(e)=>plotData({e:e, filetype:\"boltzman\", tkplot:\"plot\"})}\">Open in Matplotlib</button>\r\n        </div>\r\n\r\n    </div>\r\n\r\n\r\n    <div style=\"margin-right: 1em;\" slot=\"plotContainer\">\r\n\r\n        <div id=\"thzPlot\"></div>\r\n        <div id=\"boltzman_plot\"></div>\r\n\r\n        <div class=\"animated fadeIn hide\" class:active={graphPlotted} style=\"flex-direction:column \">\r\n            <ReportLayout bind:currentLocation id=\"thzreport\", plotID={[\"thzPlot\"]}/>\r\n        </div>\r\n\r\n    </div>\r\n</Layout>",
    "<script>\r\n\r\n    // Importing modules\r\n    import Textfield from '@smui/textfield';\r\n    import {browse, createToast} from \"../components/Layout.svelte\"\r\n    import {onMount} from \"svelte\"\r\n    import CustomDialog from \"../components/CustomDialog.svelte\"\r\n\r\n    import CustomSelect from '../components/CustomSelect.svelte';\r\n\r\n    const {exec} = require(\"child_process\")\r\n    const https = require('https');\r\n\r\n    const admZip = require('adm-zip');\r\n    import {activated, modalContent} from \"../components/Modal.svelte\"\r\n    const copy = require('recursive-copy')\r\n\r\n    ///////////////////////////////////////////////////////\r\n\r\n    let selected = \"Configuration\"\r\n    let pythonpath;\r\n    if (process.platform !== 'darwin') {\r\n        pythonpath = localStorage[\"pythonpath\"] || path.resolve(__dirname, \"../python3.7/python\")\r\n    } else { pythonpath = localStorage[\"pythonpath\"] || path.resolve(\"/usr/local/bin/python\") }\r\n    let pythonscript = localStorage[\"pythonscript\"] = path.resolve(__dirname, \"assets/python_files\")\r\n    \r\n    const navigate = (e) => {selected = e.target.innerHTML}\r\n\r\n    function checkPython(){\r\n\r\n        console.log(\"Python path checking \\n\", pythonpath)\r\n        \r\n        return new Promise((resolve, reject)=>{\r\n            exec(`${pythonpath} -V`, (err, stdout, stderr)=>{err ? reject(\"Invalid\") : resolve(\"Done\")})\r\n        })\r\n    }\r\n\r\n    const resetlocation = () => {\r\n        \r\n        checkPython()\r\n        .then(res=>{\r\n            pythonpath = localStorage[\"pythonpath\"] = path.resolve(__dirname, \"../python3.7/python\")\r\n            createToast(\"Location resetted\", \"warning\")\r\n        }).catch(err=>{ createToast(\"Default python location is not valid\", \"danger\") } )\r\n        pythonscript = localStorage[\"pythonscript\"] = path.resolve(__dirname, \"assets/python_files\")\r\n    }\r\n\r\n    const savelocation = async () => {\r\n        checkPython()\r\n        .then(res=>{\r\n            localStorage[\"pythonpath\"] = pythonpath\r\n            createToast(\"Location updated\", \"success\")\r\n        }).catch(err=>{ createToast(\"python location is not valid\", \"danger\") })\r\n        localStorage[\"pythonscript\"] = pythonscript\r\n\r\n    }\r\n\r\n    let pythonpathCheck;\r\n\r\n    onMount(()=>{\r\n        checkPython().then(res=>{ console.log(\"Python path is valid\")})\r\n        .catch(err=>pythonpathCheck.open() )\r\n\r\n        updateCheck({info:false})\r\n\r\n        setTimeout(()=>{updateCheck({info:false})}, 1*1000*60*15)\r\n    })\r\n\r\n    const handlepythonPathCheck = () => {\r\n        console.log(\"Python path checking done\")\r\n    }\r\n\r\n    // UPDATE\r\n\r\n    let gihub_branchname =  \"master\", github_repo =  \"FELion_GUI3\", github_username =  \"aravindhnivas\"\r\n    let versionFile = fs.readFileSync(path.join(__dirname, \"../version.json\"))\r\n\r\n    let currentVersion = localStorage[\"version\"] =  JSON.parse(versionFile.toString(\"utf-8\")).version\r\n    $: versionJson = `https://raw.githubusercontent.com/${github_username}/${github_repo}/${gihub_branchname}/version.json`\r\n    $: urlzip = `https://codeload.github.com/${github_username}/${github_repo}/zip/${gihub_branchname}`\r\n\r\n    const updateFolder = path.resolve(__dirname, \"..\", \"update\")\r\n\r\n    const updatefilename = \"update.zip\"\r\n    const zipFile = path.resolve(updateFolder, updatefilename)\r\n\r\n    const updateCheck = ({info=true}={}) => {\r\n\r\n        let target = document.getElementById(\"updateCheckBtn\")\r\n\r\n        target.classList.toggle(\"is-loading\")\r\n\r\n        if (!navigator.onLine) {if (info) {createToast(\"No Internet Connection!\", \"warning\")}; return}\r\n        \r\n        console.log(`URL_Package: ${versionJson}`)\r\n        let developer_version = false\r\n        console.log(`URL_ZIP: ${urlzip}`)\r\n        let new_version = \"\"\r\n\r\n        let request = https.get(versionJson, (res) => {\r\n\r\n            console.log('statusCode:', res.statusCode);\r\n            if (res.statusCode === 404) { if (info) {createToast(\"URL is not valid\", \"danger\")}; return}\r\n\r\n            console.log('headers:', res.headers);\r\n\r\n            res.on('data', (data) => {\r\n\r\n                data = data.toString(\"utf8\")\r\n                console.log(data)\r\n                data = JSON.parse(data)\r\n                console.log(data)\r\n                new_version = data.version\r\n                developer_version = data.developer\r\n\r\n                console.log(`Developer version: ${developer_version}`)\r\n                console.log(`Received package:`, data)\r\n\r\n                console.log(`Version available ${new_version}`)\r\n                console.log(`Current version ${currentVersion}`)\r\n\r\n            })\r\n\r\n            res.on(\"error\", (err)=>{\r\n                console.log(\"Error while reading downloaded data: \")\r\n                new_version = \"\"\r\n            })\r\n\r\n            res.on(\"close\", ()=>{console.log(\"Update request completed.\")})\r\n\r\n        })\r\n\r\n        request.on('error', (err) => {\r\n            console.log(\"Error occured: (Try again or maybe check your internet connection)\\n\", err)\r\n        })\r\n\r\n        request.on(\"close\", ()=>{\r\n\r\n            if (currentVersion === new_version) {\r\n                if (developer_version) {\r\n                    if (info) {createToast(`CAUTION! You are checking with developer branch which has experimental features. Take backup before updating.`, \"danger\")}\r\n                } else { if (info) {createToast(\"No stable update available\", \"warning\")}}\r\n            }\r\n\r\n\r\n            else if (currentVersion < new_version) {\r\n\r\n                createToast(\"New update available\", \"success\")\r\n\r\n                let options = {\r\n                    title: \"FELion_GUI3\",\r\n                    message: \"Update available \"+new_version,\r\n                    buttons: [\"Update and restart\", \"Later\"],\r\n                    type:\"info\"\r\n                }\r\n                \r\n                let response = remote.dialog.showMessageBox(remote.getCurrentWindow(), options)\r\n                console.log(response)\r\n                switch (response) {\r\n                    case 0:\r\n                        update()\r\n                    break;\r\n                    case 1:\r\n                        createToast(\"Not updating now\")\r\n                    break;\r\n                }\r\n\r\n            }\r\n            console.log(\"Update check completed\")\r\n            target.classList.toggle(\"is-loading\")\r\n        })\r\n\r\n    }\r\n\r\n    // Download the update file\r\n\r\n    const download = () => {\r\n\r\n        // const downloadedFile = fs.createWriteStream(zipFile)\r\n        return new Promise((resolve)=>{\r\n\r\n            let response = https.get(urlzip, (res) => {\r\n                console.log(`URL: ${urlzip}`)\r\n                console.log('statusCode:', res.statusCode);\r\n\r\n                console.log('headers:', res.headers);\r\n\r\n                res.pipe(fs.createWriteStream(zipFile))\r\n                console.log(\"File downloaded\")\r\n\r\n            })\r\n\r\n            response.on(\"close\", () => {\r\n                \r\n                console.log(\"Downloading Completed\")\r\n                console.log(\"Extracting files\")\r\n\r\n                setTimeout(()=>{\r\n\r\n                    let zip = new admZip(zipFile);\r\n                    zip.extractAllTo(updateFolder, /*overwrite*/true);\r\n                    console.log(\"File Extracted\")\r\n\r\n                    resolve(\"File extracted\")\r\n                    createToast(\"Downloading Completed\")\r\n                }, 1600)\r\n            })\r\n        })\r\n    }\r\n\r\n    const update = async (event) => {\r\n\r\n        let target = document.getElementById(\"updateBtn\")\r\n\r\n        target.classList.toggle(\"is-loading\")\r\n\r\n        if (!fs.existsSync(updateFolder)) {fs.mkdirSync(updateFolder)}\r\n        \r\n        await download()\r\n        InstallUpdate(target)\r\n\r\n    }\r\n\r\n    const InstallUpdate = (target) => {\r\n\r\n        console.log(\"Copying downloaded files\")\r\n\r\n        let src = path.resolve(updateFolder, `${github_repo}-${gihub_branchname}`)\r\n        let dest = path.resolve(__dirname, \"..\")\r\n\r\n        copy(src, dest, {overwrite: true}, function(error, results) {\r\n            if (error) {\r\n                console.error('Copy failed: ' + error);\r\n                createToast(\"Update failed.\\nMaybe the user doesn't have necessary persmission to write files in the disk\", \"danger\")\r\n\r\n                return target.classList.toggle(\"is-loading\")\r\n            } else {\r\n                console.info('Copied ' + results.length + ' files')\r\n\r\n                createToast(\"Updated succesfull. Restart the program (Press Ctrl + R).\", \"success\")\r\n                target.classList.toggle(\"is-loading\")\r\n                if (process.versions.electron >= \"7\") {\r\n\r\n                    let response = remote.dialog.showMessageBoxSync(remote.getCurrentWindow(), \r\n                        {title:\"FELion_GUI3\", type:\"info\", message:\"Update succesfull\", buttons:[\"Restart\", \"Restart later\"]} )\r\n                    if (response===0) {remote.getCurrentWindow().reload()}\r\n                } else {\r\n                    let response = remote.dialog.showMessageBox(remote.getCurrentWindow(), \r\n                        {title:\"FELion_GUI3\", type:\"info\", message:\"Update succesfull\", buttons:[\"Restart\", \"Restart later\"]} )\r\n                    if (response===0) {remote.getCurrentWindow().reload()}\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    // Backup and restore\r\n    let backupName = \"FELion_GUI_backup\"\r\n\r\n    const backUp = (event) => {\r\n\r\n        let target = event.target\r\n        \r\n        browse({dir:true}).then(result=>{\r\n\r\n            let folderName;\r\n            if (!result.canceled) { folderName = result.filePaths[0] } else {return console.log(\"Cancelled\")}\r\n\r\n            target.classList.toggle(\"is-loading\")\r\n            console.log(\"Selected folder: \", folderName)\r\n\r\n            const _dest = path.resolve(folderName, backupName)\r\n            const _src =path.resolve(__dirname, \"..\")\r\n\r\n            copy(_src, _dest, {overwrite: true, filter:fs.readdirSync(_src).filter(file => file != \"node_modules\")}, function(error, results) {\r\n                if (error) { console.log('Copy failed: ' + error); createToast(\"Error Occured while copying\", \"danger\"); target.classList.toggle(\"is-loading\")}\r\n            \r\n                else {\r\n                    console.info('Copied ' + results.length + ' files')\r\n                    console.log(\"BackUp completed\")\r\n                    createToast(\"BackUp completed\", \"success\")\r\n                    target.classList.toggle(\"is-loading\")\r\n                }\r\n            })\r\n        })\r\n        .catch(err=>{\r\n            console.log(err)\r\n            $modalContent = err\r\n            $activated = true\r\n        })\r\n    }\r\n\r\n    const restore = () =>{\r\n        console.log(`Restoring existing software to ${__dirname}`)\r\n\r\n        let target = event.target\r\n        browse({dir:true}).then(result=>{\r\n\r\n            let folderName;\r\n            if (!result.canceled) { folderName = result.filePaths[0] } else {return console.log(\"Cancelled\")}\r\n\r\n            target.classList.toggle(\"is-loading\")\r\n            console.log(\"Selected folder: \", folderName)\r\n\r\n            const _dest = path.resolve(__dirname, \"..\")\r\n            const _src = path.resolve(folderName, backupName)\r\n            \r\n            copy(_src, _dest, {overwrite: true}, function(error, results) {\r\n                if (error) { console.log('Copy failed: ' + error); createToast(\"Error Occured while copying\", \"danger\"); target.classList.toggle(\"is-loading\")}\r\n                else {\r\n                    console.info('Copied ' + results.length + ' files')\r\n                    target.classList.toggle(\"is-loading\")\r\n                    let response = remote.dialog.showMessageBox(remote.getCurrentWindow(),\r\n                        {title:\"FELion_GUI3\", type:\"info\", message:\"Restored succesfull\", buttons:[\"Restart\", \"Restart later\"]} )\r\n\r\n                    if (response===0){ remote.getCurrentWindow().reload()}\r\n                    else console.log(\"Restarting later\")\r\n\r\n                    console.log(\"Restoring completed\")\r\n                    createToast(\"Restoring completed\", \"success\")\r\n                }\r\n            })\r\n        })\r\n        .catch(err=>{\r\n            console.log(err)\r\n            $modalContent = err\r\n            $activated = true\r\n        \r\n        })\r\n\r\n    }\r\n\r\n</script>\r\n\r\n<style>\r\n\r\n    section { margin: 0; padding: 0; }\r\n    .side-panel, .main-panel {height: calc(100vh - 7em);}\r\n    .box { background-color: #6a50ad8a}\r\n    .main-panel {margin: 0 5em;}\r\n\r\n    .left .title { letter-spacing: 0.1em; text-transform: uppercase; padding: 0.5em;\r\n        font-size: larger; cursor: pointer; border-radius: 20px 0; margin-bottom: 1em;\r\n    }\r\n\r\n    .container {padding: 2em; display: grid;}\r\n    .clicked {border-left: 2px solid #fafafa; background-color: #6a50ad;}\r\n    .right > div {display: none;}\r\n    .active {display: block!important; }\r\n    .right .title {letter-spacing: 0.1em; text-transform: uppercase;}\r\n    \r\n    * :global(option) { color: black; }\r\n</style>\r\n\r\n<CustomDialog id=\"pythonpath_Check\" bind:dialog={pythonpathCheck} on:response={handlepythonPathCheck}\r\n    title={\"Python path is not valid\"} content={\"Change it in Settings --> Configuration\"} label1=\"Okay\", label2=\"Cancel\"/>\r\n\r\n<section class=\"section animated fadeIn\" id=\"Settings\" style=\"display:none\">\r\n    <div class=\"columns\">\r\n\r\n        <div class=\"column side-panel is-2-widescreen is-3-desktop is-4-tablet box adjust-right\">\r\n            <div class=\"container left\">\r\n                <div class=\"title nav hvr-glow\" class:clicked={selected===\"Configuration\"} on:click={navigate}>Configuration</div>\r\n                <div class=\"title nav hvr-glow\" class:clicked={selected===\"Update\"} on:click={navigate}>Update</div>\r\n                <div class=\"title nav hvr-glow\" class:clicked={selected===\"About\"} on:click={navigate}>About</div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"column main-panel box\">\r\n            <div class=\"container right\">\r\n\r\n                <!-- Configuration -->\r\n                <div class=\"content animated fadeIn\" class:active={selected===\"Configuration\"}>\r\n                    <h1 class=\"title\">Configuration</h1>\r\n                    <Textfield style=\"margin-bottom:1em;\" bind:value={pythonpath} label=\"Python path\" />\r\n                    <Textfield style=\"margin-bottom:1em;\" bind:value={pythonscript} label=\"Python script path\" />\r\n                    \r\n                    <button class=\"button is-link\" on:click={resetlocation}>Reset</button>\r\n                    <button class=\"button is-link\" on:click={savelocation}>Save</button>\r\n\r\n                </div>\r\n\r\n                <!-- Update -->\r\n                <div class=\"content animated fadeIn\" class:active={selected===\"Update\"}>\r\n                    <h1 class=\"title\">Update</h1>\r\n                    <div class=\"subtitle\">Current Version {currentVersion}</div>\r\n                    \r\n                    <div class=\"content\">\r\n                        <Textfield style=\"width:7em; margin-right:2em;\" bind:value={github_username} label=\"Github username\" />\r\n                        <Textfield style=\"width:7em; margin-right:2em;\" bind:value={github_repo} label=\"Github Repo\" />\r\n                        <CustomSelect bind:picked={gihub_branchname} label=\"Github branch\" options={[\"master\", \"developer\"]}/>\r\n                    </div>\r\n\r\n                    <div class=\"content\">\r\n                        <button class=\"button is-link\" id=\"updateCheckBtn\" on:click={updateCheck}>Check update</button>\r\n                        <button class=\"button is-link\" id=\"updateBtn\" on:click={update}>Update</button>\r\n                    </div>\r\n\r\n\r\n                    <div class=\"content\">\r\n                        <Textfield style=\"width:30%; margin-right:2em;\" bind:value={backupName} label=\"Github username\" />\r\n                        <button class=\"button is-link\" on:click={backUp}>Backup</button>\r\n                        <button class=\"button is-link\" on:click={restore}>Restore</button>\r\n                    </div>\r\n                    \r\n\r\n                </div>\r\n\r\n                <!-- About -->\r\n                <div class=\"content animated fadeIn\" class:active={selected===\"About\"}>\r\n                    <h1 class=\"title\">About</h1>\r\n\r\n                </div>\r\n                \r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n    \r\n</section>",
    "<script>\r\n    // IMPORTING Modules\r\n    import Textfield from '@smui/textfield'\r\n    import HelperText from '@smui/textfield/helper-text/index'\r\n    import Layout, {browse, createToast} from \"../components/Layout.svelte\"\r\n    import { fly, fade } from 'svelte/transition'\r\n    import Ripple from '@smui/ripple'\r\n\r\n    import {activated, modalContent} from \"../components/Modal.svelte\"\r\n    \r\n    import {plot, subplot} from \"../js/functions.js\"\r\n    import { flip } from 'svelte/animate'\r\n    \r\n    import DataTable, {Head, Body, Row, Cell} from '@smui/data-table'\r\n    import CustomCheckbox from '../components/CustomCheckbox.svelte';\r\n    import CustomSwitch from '../components/CustomSwitch.svelte';\r\n\r\n    import CustomSelect from '../components/CustomSelect.svelte';\r\n\r\n    import CustomIconSwitch from '../components/CustomIconSwitch.svelte';\r\n    import CustomRadio from '../components/CustomRadio.svelte';\r\n    import ReportLayout from '../components/ReportLayout.svelte';\r\n    import QuickView from '../components/QuickView.svelte';\r\n    import FileBrowser from \"../components/FileBrowser.svelte\"\r\n    import Checkbox from '@smui/checkbox';\r\n\r\n    import FormField from '@smui/form-field';\r\n\r\n    const {BrowserWindow} = remote\r\n    import {onMount} from \"svelte\"\r\n   ///////////////////////////////////////////////////////////////////////\r\n\r\n    const filetype=\"felix\", id=\"Normline\"\r\n    let fileChecked=[], delta=1, toggleRow=false;\r\n    $: felixfiles = fileChecked.map(file=>path.resolve(currentLocation, file))\r\n    let plottedFiles = []\r\n    let currentLocation = localStorage[`${filetype}_location`] || \"\"\r\n    \r\n    $: console.log(`${filetype} Update: \\n${currentLocation}`)\r\n\r\n    ///////////////////////////////////////////////////////////////////////\r\n\r\n    // Theory file\r\n    let sigma = 20, scale=1, theoryfilesChecked = [], show_theoryplot = false,  showTheoryFiles = false,\r\n     theoryLocation = currentLocation\r\n    $: console.log(\"Theory files: \", theoryfilesChecked)\r\n    $: console.log(\"Theory Location\", theoryLocation)\r\n\r\n    $: theoryfiles = theoryfilesChecked.map(file=>path.resolve(theoryLocation, file))\r\n\r\n    ///////////////////////////////////////////////////////////////////////\r\n    let openShell = false;\r\n    $: console.log(\"Open Shell: \", filetype, openShell)\r\n\r\n    let normMethod = \"Relative\", normMethod_datas = {}\r\n    \r\n    let graphPlotted = false, overwrite_expfit = false\r\n    let line = [], index = [], annotations = [], plot_trace_added = 0, double_peak_active = false, line_index_count = 0\r\n\r\n    $: console.log(\"Trace length: \", plot_trace_added)\r\n    $: console.log(\"Double peak active: \", double_peak_active)\r\n\r\n    let output_name = \"averaged\"\r\n\r\n    let dataTableHead = [\"Filename\", \"Frequency (cm-1)\", \"Amplitude\", \"FWHM\", \"Sigma\"]\r\n    let dataTable = [], dataTable_avg = []\r\n    $: dataTable_weighted_avg = dataTable_avg.filter(file=> file.name == \"weighted_mean\")\r\n\r\n    $: console.log(\"dataTable\", dataTable)\r\n    $: console.log(\"dataTable_avg\", dataTable_avg)\r\n    $: console.log(\"dataTable_weighted_avg\", dataTable_weighted_avg)\r\n\r\n    let show_dataTable_only_averaged = false, keepTable = true, show_dataTable_only_weighted_averaged=false\r\n\r\n    //////// OPO Plot ///////////\r\n    let opoPlotted = false;\r\n\r\n    const getID = () => Math.random().toString(32).substring(2)\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////\r\n    const replot = () => {\r\n\r\n        if (graphPlotted) {\r\n            let {data, layout} = normMethod_datas[normMethod]\r\n\r\n            Plotly.react(\"avgplot\",data, layout, { editable: true })\r\n            line = annotations = lineData_list = [], plot_trace_added = 0\r\n        }\r\n    }\r\n    \r\n    function plotData({e=null, filetype=\"felix\", general=null}={}){\r\n\r\n        if (fileChecked.length === 0) {return createToast(\"No files selected\", \"danger\")}\r\n\r\n        if (filetype == \"general\") {\r\n\r\n            console.log(\"Sending general arguments: \", general.args)\r\n            let py = spawn(\r\n                localStorage[\"pythonpath\"],\r\n                [\"-i\", path.join(localStorage[\"pythonscript\"], general.pyfile), general.args],\r\n                { detached: true, stdio: 'ignore', shell: openShell }\r\n            )\r\n            py.unref()\r\n            createToast(\"General process sent. Expect an response soon...\")\r\n            return;\r\n        }\r\n        if (filetype == \"felix\") {graphPlotted = false, output_name = \"averaged\"}\r\n        else if (filetype == \"exp_fit\") {\r\n\r\n            if (index.length < 2) {\r\n                return createToast(\"Range not found!!. Select a range using Box-select\", \"danger\")\r\n        }}\r\n        else if (filetype == \"opofile\") {opoPlotted = true}\r\n        \r\n        else if (filetype == \"get_err\") {\r\n            if (double_peak_active) {\r\n                if (err_data1_plot) lineData_list = weighted_error[0]\r\n                else lineData_list = weighted_error[1]\r\n            }\r\n            if (lineData_list.length<2) return createToast(\"Not sufficient lines collected!\", \"danger\")\r\n        }\r\n\r\n        let target = e.target\r\n        target.classList.toggle(\"is-loading\")\r\n\r\n        let pyfileInfo = {\r\n            felix: {pyfile:\"normline.py\" , args:[...felixfiles, delta]},\r\n            exp_fit: {pyfile:\"exp_gauss_fit.py\" , args:[...felixfiles, overwrite_expfit, output_name, normMethod, currentLocation, ...index]},\r\n        \r\n            opofile: {pyfile:\"oposcan.py\" , args:[...felixfiles, \"run\"]},\r\n            find_peaks: {pyfile:\"fit_all.py\" , args:[output_name, currentLocation, normMethod, peak_prominence,  peak_width, peak_height,  ...felixfiles]},\r\n            \r\n            theory: {pyfile:\"theory.py\" , args:[...theoryfiles, normMethod, sigma, scale, theoryLocation, \"run\"]},\r\n            get_err: {pyfile:\"weighted_error.py\" , args:lineData_list},\r\n            double_peak: {pyfile:\"double_gaussian.py\" , \r\n                args:[amp1, amp2, cen1, cen2, sig1, sig2, ...felixfiles, overwrite_expfit, output_name, \r\n                    normMethod, currentLocation, ...index, \r\n                    ]},\r\n\r\n        }\r\n        let {pyfile, args} = pyfileInfo[filetype]\r\n        let py;\r\n\r\n        try {py = spawn( localStorage[\"pythonpath\"], [path.resolve(localStorage[\"pythonscript\"], pyfile), args] )}\r\n        catch (err) {\r\n            $modalContent = \"Error accessing python. Set python location properly in Settings\"\r\n            $activated = true\r\n            target.classList.toggle(\"is-loading\")\r\n            return\r\n        }\r\n        createToast(\"Process Started\")\r\n        py.stdout.on(\"data\", data => {\r\n            \r\n            console.log(\"Ouput from python\")\r\n            \r\n            \r\n            let dataReceived = data.toString(\"utf8\")\r\n\r\n            console.log(dataReceived)\r\n        });\r\n\r\n        let error_occured_py = false;\r\n        py.stderr.on(\"data\", err => {\r\n            $modalContent = err\r\n            $activated = true\r\n            error_occured_py = true;\r\n        });\r\n\r\n        py.on(\"close\", () => {\r\n\r\n            if (!error_occured_py) {\r\n\r\n                try {\r\n                    let dataFromPython = fs.readFileSync(path.join(localStorage[\"pythonscript\"], \"data.json\"))\r\n\r\n                    dataFromPython = JSON.parse(dataFromPython.toString(\"utf-8\"))\r\n\r\n                    console.log(dataFromPython)\r\n\r\n                    if (filetype == \"felix\") {\r\n\r\n                        line = [], index = [], annotations = [], lineData_list = [], plot_trace_added = 0\r\n\r\n                        show_theoryplot = false\r\n                        if (!keepTable) {dataTable = []}\r\n\r\n                        let avgdataToPlot;\r\n                        let signal_formula;\r\n                        let ylabel;\r\n\r\n                        if (normMethod === \"Log\") {\r\n                            avgdataToPlot = dataFromPython[\"average\"]\r\n\r\n                            signal_formula = \"Signal = -ln(C/B)/Power(in J)\"\r\n                            ylabel = \"Normalised Intensity per J\"\r\n\r\n                        } else if (normMethod == \"Relative\") {\r\n\r\n                            avgdataToPlot = dataFromPython[\"average_rel\"]\r\n\r\n                            signal_formula = \"Signal = (1-C/B)*100\"\r\n                            ylabel = \"Relative Depletion (%)\"\r\n\r\n                        } else if (normMethod == \"IntensityPerPhoton\") {\r\n\r\n                            avgdataToPlot = dataFromPython[\"average_per_photon\"]\r\n\r\n                            signal_formula = \"Signal = -ln(C/B)/#Photons\"\r\n                            ylabel = \"Normalised Intensity per photon\"\r\n                        }\r\n\r\n\r\n                        const get_data = (data) => {\r\n                            let dataPlot = [];\r\n                            for (let x in data) { dataPlot.push(data[x]) }\r\n                            return dataPlot\r\n                        }\r\n                        let signal = {\r\n                            \"rel\": \"Signal = (1-C/B)*100\",\r\n                            \"log\": \"Signal = -ln(C/B)/Power(in J)\",\r\n                            \"hv\": \"Signal = -ln(C/B)/#Photons\"\r\n                        }\r\n                        const set_title = (method) => `Normalised and Averaged Spectrum (delta=${delta})<br>${signal[method]}; {C=Measured Count, B=Baseline Count}`\r\n\r\n                        normMethod_datas = {\r\n                            \"Relative\": {\r\n                                \"data\": get_data(dataFromPython[\"average_rel\"]),\r\n                                \"layout\": {\r\n                                    \"title\": set_title(\"rel\"),\r\n                                    \"yaxis\": { \"title\": \"Relative Depletion (%)\" },\r\n                                    \"xaxis\": { \"title\": \"Calibrated Wavelength (cm-1)\" }\r\n                                }\r\n                            },\r\n                            \"Log\": {\r\n                                \"data\": get_data(dataFromPython[\"average\"]),\r\n                                \"layout\": {\r\n                                    \"title\": set_title(\"log\"),\r\n                                    \"yaxis\": { \"title\": \"Normalised Intensity per J\" },\r\n                                    \"xaxis\": { \"title\": \"Calibrated Wavelength (cm-1)\" }\r\n                                }\r\n                            },\r\n                            \"IntensityPerPhoton\": {\r\n                                \"data\": get_data(dataFromPython[\"average_per_photon\"]),\r\n                                \"layout\": {\r\n                                    \"title\": set_title(\"hv\"),\r\n                                    \"yaxis\": { \"title\": \"Normalised Intensity per photon\" },\r\n                                    \"xaxis\": { \"title\": \"Calibrated Wavelength (cm-1)\" }\r\n                                }\r\n                            },\r\n\r\n                        }\r\n\r\n                        plot(\r\n                            \"Baseline Corrected\",\r\n                            \"Wavelength (cm-1)\",\r\n                            \"Counts\",\r\n                            dataFromPython[\"base\"],\r\n                            \"bplot\"\r\n                        );\r\n\r\n                        plot(\r\n                            `Normalised and Averaged Spectrum (delta=${delta})<br>${signal_formula}; {C=Measured Count, B=Baseline Count}`,\r\n                            \"Calibrated Wavelength (cm-1)\",\r\n                            ylabel,\r\n                            avgdataToPlot,\r\n                            \"avgplot\"\r\n                        );\r\n\r\n                        //Spectrum and Power Analyer\r\n                        subplot(\r\n                            \"Spectrum and Power Analyser\",\r\n                            \"Wavelength set (cm-1)\",\r\n                            \"SA (cm-1)\",\r\n                            dataFromPython[\"SA\"],\r\n                            \"saPlot\",\r\n                            \"Wavelength (cm-1)\",\r\n                            `Total Power (mJ)`,\r\n                            dataFromPython[\"pow\"]\r\n                        );\r\n\r\n                        let avgplot = document.getElementById(\"avgplot\")\r\n                        avgplot.on(\"plotly_selected\", (data) => {\r\n                            if (!data) console.log(\"No data available to fit\")\r\n                            else {\r\n                                console.log(data)\r\n\r\n                                let { range } = data\r\n                                output_name = data.points[0].data.name.split(\".\")[0]\r\n                                index = range.x\r\n\r\n                                console.log(`Selected file: ${output_name}`)\r\n                                console.log(`Index selected: ${index}`)\r\n                            }\r\n                        })\r\n\r\n                        console.log(\"Graph Plotted\")\r\n                        createToast(\"Graph Plotted\", \"success\")\r\n                        graphPlotted = true\r\n                        plottedFiles = fileChecked.map(file=>file.split(\".\")[0])\r\n\r\n                    } else if (filetype == \"opofile\") {\r\n                        plot(\"OPO spectrum\", \"Wavenumber (cm-1)\", \"Counts\", dataFromPython[\"real\"], \"opoplot\");\r\n                        plot(\"OPO spectrum: Depletion (%)\", \"Wavenumber (cm-1)\", \"Depletion (%)\", dataFromPython[\"relative\"], \"opoRelPlot\");\r\n                        \r\n                    } else if (filetype == \"theory\") {\r\n\r\n                        let ylabel;\r\n                        if (normMethod === \"Log\") { ylabel = \"Normalised Intensity per J\" }\r\n                        else if (normMethod === \"Relative\") { ylabel = \"Relative Depletion (%)\" }\r\n                        else { ylabel = \"Normalised Intensity per Photon\" }\r\n\r\n                        let theoryData = [];\r\n                        for (let x in dataFromPython[\"line_simulation\"]) { theoryData.push(dataFromPython[\"line_simulation\"][x]) }\r\n\r\n                        plot(\r\n                            \"Experimental vs Theory\",\r\n                            \"Calibrated Wavelength (cm-1)\",\r\n                            ylabel, [dataFromPython[\"averaged\"], ...theoryData],\r\n                            \"exp-theory-plot\"\r\n                        )\r\n\r\n                        show_theoryplot = true\r\n                    } else if (filetype == \"exp_fit\") {\r\n\r\n                        double_peak_active = false\r\n                        Plotly.addTraces(\"avgplot\", dataFromPython[\"fit\"])\r\n                        line = [...line, ...dataFromPython[\"line\"]]\r\n                        Plotly.relayout(\"avgplot\", { shapes: line })\r\n\r\n                        annotations = [...annotations, dataFromPython[\"annotations\"]]\r\n                        Plotly.relayout(\"avgplot\", { annotations: annotations })\r\n\r\n                        \r\n                        plot_trace_added++\r\n                        \r\n                        let [freq, amp, fwhm, sig] = dataFromPython[\"table\"].split(\", \")\r\n\r\n                        let color = \"#fafafa\";\r\n                        if (output_name === \"averaged\") {\r\n                            color = \"#452f7da8\"\r\n                            dataTable_avg = [...dataTable_avg, {name: `Line #${line_index_count}`, id:getID(), freq:freq, amp:amp, fwhm:fwhm, sig:sig, color:color}]\r\n                            dataTable_avg = _.uniqBy(dataTable_avg, \"freq\")\r\n                            line_index_count++\r\n\r\n                        } else {\r\n                            if (collectData) {\r\n                                console.log(\"Collecting lines\")\r\n                                lineData_list = [...lineData_list, dataFromPython[\"for_weighted_error\"]]\r\n                             }\r\n                        }\r\n                        \r\n                        let newTable = {name: output_name, id:getID(), freq:freq, amp:amp, fwhm:fwhm, sig:sig, color:color}\r\n                        dataTable = _.uniqBy([...dataTable, newTable], \"freq\")\r\n                        \r\n                        console.log(\"Line fitted\")\r\n                        createToast(\"Line fitted with gaussian function\", \"success\")\r\n                    } else if (filetype == \"get_err\") {\r\n                        let {freq, amp, fwhm, sig } = dataFromPython\r\n                        let data1 = {name: \"unweighted_mean\", id:getID(), freq:freq.mean, amp:amp.mean, fwhm:fwhm.mean, sig:sig.mean, color:\"#452f7da8\"}\r\n                        let data2 = {name: \"weighted_mean\", id:getID(), freq:freq.wmean, amp:amp.wmean, fwhm:fwhm.wmean, sig:sig.wmean, color:\"#452f7da8\"}\r\n                        dataTable = [...dataTable, data1, data2]\r\n                        dataTable_avg = [...dataTable_avg, data1, data2]\r\n\r\n                        if (double_peak_active) {\r\n                            err_data1_plot ? weighted_error[0] = [] : weighted_error[1] = []\r\n                            err_data1_plot = false\r\n                        } else {  lineData_list = [] }\r\n\r\n                    } else if (filetype == \"double_peak\") {\r\n                        \r\n                        double_peak_active = true\r\n                        console.log(\"Double peak calculation\")\r\n                        Plotly.addTraces(\"avgplot\", dataFromPython[\"peak\"])\r\n                        plot_trace_added++\r\n\r\n                        annotations = [...annotations, ...dataFromPython[\"annotations\"]]\r\n\r\n                        Plotly.relayout(\"avgplot\", { annotations: annotations })\r\n\r\n                        let [freq1, amp1, sig1, fwhm1, freq2, amp2, sig2, fwhm2] = dataFromPython[\"table\"].split(\", \")\r\n                        \r\n                        let color = \"#fafafa\";\r\n                        if (output_name === \"averaged\") {\r\n                            color = \"#452f7da8\"\r\n                            \r\n                            let newTable1 = {name: `Line #${line_index_count}`, id:getID(), freq:freq1, amp:amp1, fwhm:fwhm1, sig:sig1, color:color}\r\n                            let newTable2 = {name: `Line #${line_index_count+1}`, id:getID(), freq:freq2, amp:amp2, fwhm:fwhm2, sig:sig2, color:color}\r\n                            \r\n                            dataTable_avg = [...dataTable_avg, newTable1, newTable2]\r\n                            dataTable_avg = _.uniqBy(dataTable_avg, \"freq\")\r\n                            line_index_count += 2\r\n                            \r\n                        } else {\r\n                            if (collectData) {\r\n                                console.log(\"Collecting lines\")\r\n                                err_data1_plot = true    \r\n                                weighted_error[0] = [...weighted_error[0], dataFromPython[\"for_weighted_error1\"]]\r\n                                weighted_error[1] = [...weighted_error[1], dataFromPython[\"for_weighted_error2\"]]\r\n                             }\r\n                        }\r\n\r\n                        let newTable1 = {name: output_name, id:getID(), freq:freq1, amp:amp1, fwhm:fwhm1, sig:sig1, color:color}\r\n                        let newTable2 = {name: output_name, id:getID(), freq:freq2, amp:amp2, fwhm:fwhm2, sig:sig2, color:color}\r\n\r\n                        dataTable = _.uniqBy([...dataTable, newTable1, newTable2], \"freq\")\r\n                    } else if (filetype == \"find_peaks\") {\r\n                        Plotly.relayout(\"avgplot\", { annotations: [] })\r\n                        Plotly.relayout(\"avgplot\", { annotations: dataFromPython[2][\"annotations\"] })\r\n                    }\r\n                } catch (err) { $modalContent = err; $activated = true }\r\n\r\n            }\r\n            console.log(\"Process closed\")\r\n            target.classList.toggle(\"is-loading\")\r\n        })\r\n    }\r\n    const clearAllPeak = () => {\r\n\r\n        if (plot_trace_added === 0) {return createToast(\"No fitted lines found\", \"danger\")}\r\n\r\n        console.log(\"Removing all found peak values\")\r\n        \r\n        annotations = index = line = []\r\n        Plotly.relayout(\"avgplot\", { annotations: [], shapes: [] })\r\n        for (let i=0; i<plot_trace_added; i++) {Plotly.deleteTraces(\"avgplot\", [-1])}\r\n        plot_trace_added = 0\r\n\r\n    }\r\n\r\n    const clearLastPeak = (e) => {\r\n        \r\n        if (plot_trace_added === 0) {return createToast(\"No fitted lines found\", \"danger\")}\r\n            \r\n        if (double_peak_active) {\r\n            plotData({filetype:\"general\", general:{args:[output_name, currentLocation], pyfile:\"delete_fileLines.py\"}})\r\n            plotData({filetype:\"general\", general:{args:[output_name, currentLocation], pyfile:\"delete_fileLines.py\"}})\r\n            dataTable = _.dropRight(dataTable, 2)\r\n            annotations = _.dropRight(annotations, 2)\r\n\r\n        } else {\r\n            plotData({filetype:\"general\", general:{args:[output_name, currentLocation], pyfile:\"delete_fileLines.py\"}})\r\n            dataTable = _.dropRight(dataTable, 1)\r\n            line = _.dropRight(line, 2)\r\n            annotations = _.dropRight(annotations, 1)\r\n            \r\n        }\r\n        Plotly.relayout(\"avgplot\", { annotations: annotations, shapes: line })\r\n\r\n        Plotly.deleteTraces(\"avgplot\", [-1])\r\n        console.log(\"Last fitted peak removed\")\r\n\r\n        plot_trace_added--\r\n    }\r\n\r\n    onMount(()=>{\r\n        console.log(\"Normline mounted\")\r\n    })\r\n    let collectData = true, lineData_list = [], toggleDoubleGaussRow = false, weighted_error = [[], []], err_data1_plot = false\r\n    let amp1=0, amp2=0, cen1=0, cen2=0, sig1=5, sig2=5\r\n    let toggleFindPeaksRow = false\r\n    let peak_height = 0, peak_width = 5, peak_prominence = 3;\r\n    let style = \"width:7em; height:3.5em; margin-right:0.5em\";\r\n\r\n</script>\r\n\r\n<style>\r\n\r\n    * :global(.button) {margin: 0.4em;}\r\n    * :global(.short-input) { max-width: 7em; margin: 0 1em; }\r\n    * :global(.mdc-text-field--outlined) {height: 2.5em;}\r\n    * :global(.plotSlot) { width: 100%}\r\n\r\n    * :global(option) { color: black; }\r\n    * :global(.mdc-data-table) {min-width: 30em}\r\n    .plotSlot > div { width: calc(100% - 1em); margin-top: 1em; }\r\n\r\n    .dataTable {\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n    * :global(hr) {\r\n        width: 90%;\r\n        margin: 1em 0;\r\n    }\r\n    * :global(.report) {\r\n        display: block;\r\n        /* width: 90%; */\r\n        margin-bottom: 1em;\r\n    }\r\n    * :global(table th:not([align])) {text-align: center; padding: 1em;}\r\n    * :global(table td:not([align])) {text-align: center; padding: 1em;}\r\n    * :global(#felixTableContainer) {border: 1px solid #5b3ea2;}\r\n    * :global(#felixTableContainer thead) {background-color: #e1e1e1;}\r\n\r\n    .active {display: block!important;}\r\n    .hide {display: none;}\r\n    .felixPlot > div {margin-bottom: 1em;}\r\n    .notification {width: 100%; border: 1px solid;}\r\n</style>\r\n\r\n<QuickView style=\"padding:1em;\" footer={false} bind:active={showTheoryFiles} title=\"Browse Theory files\">\r\n    <FileBrowser bind:currentLocation={theoryLocation} bind:fileChecked={theoryfilesChecked} />\r\n</QuickView>\r\n\r\n<Layout {filetype} {id} bind:currentLocation bind:fileChecked >\r\n    <div class=\"buttonSlot\" slot=\"buttonContainer\">\r\n\r\n        <div class=\"align\" >\r\n\r\n            <button class=\"button is-link\" \r\n                on:click=\"{(e)=>plotData({e:e, filetype:\"general\", general:{args:felixfiles, pyfile:\"baseline.py\"}})}\">Create Baseline</button>\r\n            <button class=\"button is-link\" on:click=\"{(e)=>plotData({e:e, filetype:\"felix\"})}\">FELIX Plot</button>\r\n\r\n            <Textfield type=\"number\" style=\"width:7em\" variant=\"outlined\" bind:value={delta} label=\"Delta\"/>\r\n            <button class=\"button is-link\" \r\n                on:click=\"{(e)=>plotData({e:e, filetype:\"general\", general:{args:[...felixfiles, normMethod], pyfile:\"norm_tkplot.py\"}})}\">Open in Matplotlib</button>\r\n            <CustomIconSwitch bind:toggler={openShell} icons={[\"settings_ethernet\", \"code\"]}/>\r\n            <button class=\"button is-link\" use:Ripple={[true, {color: 'primary'}]} tabindex=\"0\" on:click=\"{()=>toggleRow = !toggleRow}\">Add Theory</button>\r\n            <button class=\"button is-link\" on:click=\"{(e)=>plotData({e:e, filetype:\"opofile\"})}\">OPO</button>\r\n            <CustomIconSwitch bind:toggler={opoPlotted} icons={[\"keyboard_arrow_up\", \"keyboard_arrow_down\"]}/>\r\n        </div>\r\n\r\n        <div class=\"align animated fadeIn hide\" class:active={toggleRow}>\r\n            <button class=\"button is-link\" on:click=\"{()=>showTheoryFiles = !showTheoryFiles}\">Browse File</button>\r\n            <Textfield type=\"number\" style=\"width:7em; margin-right:0.5em;\" variant=\"outlined\" bind:value={sigma} label=\"Sigma\" on:change=\"{(e)=>plotData({e:e, filetype:\"theory\"})}\"/>\r\n            <Textfield type=\"number\" style=\"width:7em\" variant=\"outlined\" bind:value={scale} label=\"Scale\" on:change=\"{(e)=>plotData({e:e, filetype:\"theory\"})}\"/>\r\n            <button class=\"button is-link\" \r\n                on:click=\"{(e)=>plotData({e:e, filetype:\"general\", general:{args:[...theoryfiles, normMethod, sigma, scale, theoryLocation, \"plot\"], pyfile:\"theory.py\"}})}\">Open in Matplotlib</button>\r\n            <button class=\"button is-link\" on:click=\"{(e)=>plotData({e:e, filetype:\"theory\"})}\">Submit</button>\r\n        </div>\r\n\r\n        <div class=\"align\" on:change={replot}>\r\n            <CustomRadio bind:selected={normMethod} options={[\"Log\", \"Relative\", \"IntensityPerPhoton\"]}/>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"plotSlot\" slot=\"plotContainer\">\r\n\r\n        <div class=\"felixPlot\">\r\n            <div class=\"animated fadeIn hide\" class:active={show_theoryplot} id=\"exp-theory-plot\"></div>\r\n            <div id=\"bplot\"></div>\r\n            <div id=\"saPlot\"></div>\r\n            <div id=\"avgplot\"></div>\r\n            <div class=\"animated fadeIn hide\" class:active={opoPlotted} id=\"opoplot\"></div>\r\n            <div class=\"animated fadeIn hide\" class:active={opoPlotted} id=\"opoRelPlot\"></div>\r\n        </div>\r\n\r\n        <div class=\"animated fadeIn hide\" class:active={graphPlotted}>\r\n            <!-- Pos-processing felix data -->\r\n            <div class=\"align content\" transition:fade>\r\n                <CustomSelect bind:picked={output_name} label=\"Output filename\" options={[\"averaged\", ...plottedFiles]}/>\r\n                <CustomSwitch style=\"margin: 0 1em;\" bind:selected={overwrite_expfit} label=\"Overwrite\"/>\r\n                <CustomSwitch style=\"margin: 0 1em;\" bind:selected={collectData} label=\"Collect\"/>\r\n            </div>\r\n\r\n            <div class=\"align content\">\r\n                <button class=\"button is-link\" on:click=\"{(e)=>plotData({e:e, filetype:\"exp_fit\"})}\">Exp Fit.</button>\r\n                <button class=\"button is-link\" on:click=\"{(e)=>toggleDoubleGaussRow = !toggleDoubleGaussRow}\">Double Gauss.</button>\r\n                <button class=\"button is-warning\" on:click={clearLastPeak}>Clear Last</button>\r\n                <button class=\"button is-danger\" on:click={clearAllPeak}>Clear All</button>\r\n                <button class=\"button is-link\" on:click=\"{(e)=>plotData({e:e, filetype:\"get_err\"})}\">Weighted Mean</button>\r\n                <button class=\"button is-warning\" on:click=\"{(e)=>{lineData_list = []; createToast(\"Line collection restted\", \"warning\")}}\">Reset</button>\r\n                <button class=\"button is-link\" on:click=\"{()=>toggleFindPeaksRow = !toggleFindPeaksRow}\">Find Peaks</button>\r\n            </div>\r\n\r\n            <div class=\"align content animated fadeIn hide\" class:active={toggleFindPeaksRow}>\r\n                <Textfield type=\"number\" {style} on:change=\"{(e)=>plotData({e:e, filetype:\"find_peaks\"})}\" bind:value={peak_prominence} label=\"Prominance\" />\r\n                <Textfield type=\"number\" {style} on:change=\"{(e)=>plotData({e:e, filetype:\"find_peaks\"})}\" bind:value={peak_width} label=\"Width\" />\r\n                <Textfield type=\"number\" {style} on:change=\"{(e)=>plotData({e:e, filetype:\"find_peaks\"})}\" bind:value={peak_height} label=\"Height\" />\r\n                <button class=\"button is-link\" on:click=\"{(e)=>plotData({e:e, filetype:\"find_peaks\"})}\">Get Peaks</button>\r\n                <button class=\"button is-danger\" on:click=\"{(e)=>window.Plotly.relayout(\"avgplot\", { annotations: [] })}\">Clear</button>\r\n            </div>\r\n\r\n            <div class=\"align content animated fadeIn hide\" class:active={toggleDoubleGaussRow}>\r\n                <Textfield type=\"number\" style=\"width:7em; margin-right:0.5em;\" bind:value={amp1} label=\"Amp1\" />\r\n                <Textfield type=\"number\" style=\"width:7em; margin-right:0.5em;\" bind:value={amp2} label=\"Amp2\" />\r\n                <Textfield type=\"number\" style=\"width:7em; margin-right:0.5em;\" bind:value={sig1} label=\"Sigma1\" />\r\n                <Textfield type=\"number\" style=\"width:7em; margin-right:0.5em;\" bind:value={sig2} label=\"Sigma2\" />\r\n                <Textfield type=\"number\" style=\"width:7em; margin-right:0.5em;\" bind:value={cen1} label=\"Cen1\" />\r\n                <Textfield type=\"number\" style=\"width:7em; margin-right:0.5em;\" bind:value={cen2} label=\"Cen2\" />\r\n                <button class=\"button is-link\" on:click=\"{(e)=>plotData({e:e, filetype:\"double_peak\"})}\">Submit</button>\r\n            </div>\r\n\r\n            <!-- Frequency table list -->\r\n            <div class=\"align content\">\r\n                <div class=\"title notification is-link\">Frequency table</div>\r\n                <CustomCheckbox bind:selected={show_dataTable_only_averaged} label=\"Only Averaged\" />\r\n                <CustomCheckbox bind:selected={show_dataTable_only_weighted_averaged} label=\"Only weighted Averaged\" />\r\n                <CustomCheckbox bind:selected={keepTable} label=\"Keep table\" />\r\n                <button class=\"button is-warning\" \r\n                    on:click=\"{()=>{dataTable = window._.dropRight(dataTable, 1); \r\n                    if(show_dataTable_only_averaged){dataTable_avg = window._.dropRight(dataTable_avg, 3); line_index_count--}}}\">Clear Last</button>\r\n                <button class=\"button is-danger\" on:click=\"{()=>{dataTable=dataTable_avg=[]; line_index_count=0}}\">Clear Table</button>\r\n\r\n            </div>\r\n\r\n            <!-- Data Table -->\r\n            <div class=\"dataTable\" transition:fade>\r\n\r\n                <DataTable table$aria-label=\"felix-tableAriaLabel\" table$id=\"felixTable\" id=\"felixTableContainer\">\r\n                    <Head >\r\n                        <Row>\r\n                            {#each dataTableHead as item}\r\n                                <Cell>{item}</Cell>\r\n                            {/each}\r\n                        </Row>\r\n                    </Head>\r\n                    <Body>\r\n                        {#if show_dataTable_only_weighted_averaged}\r\n                            {#each dataTable_weighted_avg as table, index (table.id)}\r\n                                <Row>\r\n                                    <Cell>Line #{index}</Cell>\r\n                                    <Cell>{table.freq}</Cell>\r\n                                    <Cell>{table.amp}</Cell>\r\n                                    <Cell>{table.fwhm}</Cell>\r\n                                    <Cell>{table.sig}</Cell>\r\n                                </Row>\r\n                            {/each}\r\n                        {:else if show_dataTable_only_averaged && !show_dataTable_only_weighted_averaged}\r\n                            {#each dataTable_avg as table (table.id)}\r\n                                <Row>\r\n                                    <Cell>{table.name}</Cell>\r\n                                    <Cell>{table.freq}</Cell>\r\n                                    <Cell>{table.amp}</Cell>\r\n                                    <Cell>{table.fwhm}</Cell>\r\n                                    <Cell>{table.sig}</Cell>\r\n                                </Row>\r\n                            {/each}\r\n                        {:else}\r\n                            {#each dataTable as table (table.id)}\r\n                                <Row style=\"background-color: {table.color};\">\r\n                                    <Cell>{table.name}</Cell>\r\n                                    <Cell>{table.freq}</Cell>\r\n                                    <Cell>{table.amp}</Cell>\r\n                                    <Cell>{table.fwhm}</Cell>\r\n                                    <Cell>{table.sig}</Cell>\r\n                                </Row>\r\n                            {/each}\r\n                        {/if}\r\n                    </Body>\r\n                </DataTable>\r\n            </div>\r\n\r\n            <ReportLayout bind:currentLocation={currentLocation} id=\"felixreport\" tableID=\"felixTable\"\r\n                plotID={[\"bplot\", \"saPlot\", \"avgplot\", \"exp-theory-plot\"]} includeTable={true}/>\r\n\r\n        </div>\r\n    </div>\r\n</Layout>",
    "<script context=\"module\">\r\n    export const createToast = (msg, type=\"primary\") => Toast.create({ message: msg, position:\"is-top\", type:`is-${type}`})\r\n</script>\r\n\r\n<script>\r\n\r\n    import List, {Item, Meta, Label} from '@smui/list';\r\n    import Checkbox from '@smui/checkbox';\r\n    import IconButton, {Icon} from '@smui/icon-button';\r\n    import { fly, slide } from 'svelte/transition';\r\n    import FormField from '@smui/form-field';\r\n    import Switch from '@smui/switch';\r\n\r\n    import Textfield from '@smui/textfield';\r\n    import { Toast } from 'svelma'\r\n    import {activated, modalContent, modalTitle} from \"./Modal.svelte\"\r\n    \r\n    import {onMount, afterUpdate, beforeUpdate} from \"svelte\"\r\n    const tree = require(\"directory-tree\")\r\n    // console.log(tree)\r\n    ///////////////////////////////////////////////////////////////////////////\r\n\r\n    export let fileChecked = [],  currentLocation = \"\", filetype = \"\"\r\n\r\n    let original_location = currentLocation\r\n    let files = [], otherfolders = [], selectAll=false, showfiles = true, original_files = [];\r\n    let searchKey = \"\";\r\n\r\n    $: parentFolder = path.basename(currentLocation)\r\n\r\n    const searchfile = () => {\r\n        console.log(searchKey)\r\n        if (!searchKey) {files = original_files}\r\n        else {files = original_files.filter(file=>file.includes(searchKey))}\r\n\r\n    }\r\n\r\n    function getfiles(toast=false) {\r\n\r\n        if (!currentLocation) {return createToast(\"Location undefined\", \"danger\")}\r\n\r\n        original_files = otherfolders = files = fileChecked = [], selectAll = false\r\n        try {\r\n            console.log(\"Current location: \", currentLocation)\r\n            let folderfile = tree( currentLocation, { extensions: new RegExp(filetype) } )\r\n            \r\n            original_files = files = folderfile.children.filter(file => file.type === \"file\").map(file=>file.name)\r\n\r\n            otherfolders = folderfile.children.filter(file => file.type === \"directory\").map(file=>file.name)\r\n            console.log(folderfile)\r\n            \r\n            original_location = currentLocation\r\n            console.log(\"Folder updated\");\r\n            if (toast) {createToast(\"Files updated\")}\r\n\r\n        } catch (err) {\r\n            console.log(err)\r\n            $modalContent = err;\r\n            $activated = true;\r\n        }\r\n\r\n    }\r\n\r\n    const changeDirectory = (goto) => {\r\n         if (!currentLocation) {return createToast(\"Location undefined\", \"danger\")}\r\n        currentLocation = path.resolve(currentLocation, goto)\r\n\r\n        getfiles()\r\n    }\r\n    onMount(()=> {if(currentLocation !== \"\") {getfiles(); console.log(\"onMount Updating location for \", filetype)}} )\r\n\r\n    afterUpdate(() => {\r\n        if (original_location !== currentLocation) {getfiles(); console.log(\"Updating location for \", filetype)}\r\n    });\r\n</script>\r\n\r\n<style>\r\n\r\n    .filelist { max-height: calc(100vh - 30em); overflow-y: auto; }\r\n    .folderfile-list {max-height: calc(100vh - 20em); overflow-y: auto;}\r\n\r\n    .align {display: flex; align-items: center;}\r\n    .center {justify-content: center;}\r\n    .browseIcons {cursor: pointer;}\r\n\r\n</style>\r\n\r\n<div class=\"align center browseIcons\">\r\n    <Icon class=\"material-icons\" on:click=\"{()=>changeDirectory(original_location)}\">home</Icon>\r\n    \r\n    <Icon class=\"material-icons\" on:click=\"{()=>{getfiles(true)}}\">refresh</Icon>\r\n    <Icon class=\"material-icons\" on:click=\"{()=>changeDirectory(\"..\")}\">arrow_back</Icon>\r\n</div>\r\n\r\n<Textfield on:keyup={searchfile} style=\"margin-bottom:1em;\" bind:value={searchKey} label=\"Seach\" />\r\n\r\n<div class=\"align center\">\r\n    <FormField>\r\n\r\n        <Switch bind:checked={selectAll} on:change=\"{()=>selectAll ? fileChecked = [...files] : fileChecked = []}\"/>\r\n        <span slot=\"label\">Select All</span>\r\n    </FormField>\r\n</div>\r\n\r\n<div class=\"folderfile-list\">\r\n\r\n    <div class=\"align folderlist\" >\r\n        <IconButton  toggle bind:pressed={showfiles}>\r\n            <Icon class=\"material-icons\" on>keyboard_arrow_down</Icon>\r\n            <Icon class=\"material-icons\" >keyboard_arrow_right</Icon>\r\n        </IconButton>\r\n        <div class=\"mdc-typography--subtitle1\">{parentFolder}</div>\r\n    </div>\r\n\r\n\r\n    {#if showfiles && files != \"\" }\r\n        <div class=\"filelist\" style=\"padding-left:1em;\" transition:fly=\"{{ y: -20, duration: 500 }}\">\r\n\r\n            <List checklist>\r\n\r\n                {#each files as file (file)}\r\n                    <Item>\r\n                        <Label>{file}</Label>\r\n                        <Meta> <Checkbox bind:group={fileChecked} value={file} on:click=\"{()=>selectAll=false}\"/> </Meta>\r\n                    </Item>\r\n                {/each}\r\n\r\n            </List>\r\n        </div>\r\n    {:else if files == \"\"}\r\n        <div class=\"mdc-typography--subtitle1 align center\">No {filetype} here!</div>        \r\n    {/if}\r\n    <div class=\"otherFolderlist\" style=\"cursor:pointer\">\r\n        {#each otherfolders as folder (folder)}\r\n            <div class=\"align\" on:click=\"{()=>changeDirectory(folder)}\" transition:slide|local>\r\n                <Icon class=\"material-icons\">keyboard_arrow_right</Icon>\r\n                <div class=\"mdc-typography--subtitle1\">{folder}</div>\r\n            </div>\r\n        {/each}\r\n    </div>\r\n</div>\r\n",
    "<script context=\"module\">\r\n    export async function asyncForEach(array, callback) {\r\n        for (let index = 0; index < array.length; index++) {\r\n            await callback(array[index], index, array);\r\n        }\r\n    }\r\n</script>\r\n\r\n<script>\r\n\r\n    import Radio from '@smui/radio'\r\n    import FormField from '@smui/form-field'\r\n    import CustomCheckbox from './CustomCheckbox.svelte'\r\n    import Textfield from '@smui/textfield'\r\n    import HelperText from '@smui/textfield/helper-text/index'\r\n    import Ripple from '@smui/ripple'\r\n\r\n    import {createToast} from \"./Layout.svelte\"\r\n    \r\n    const {BrowserWindow} = remote\r\n    import {modalContent, activated} from \"./Modal.svelte\"\r\n    import Select, {Option} from '@smui/select'\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    export let currentLocation = \"\", id=\"report\", plotID = [], tableID=\"felixTable\", includeTable=false\r\n    \r\n    $: reportFile = path.resolve(currentLocation, `reports/${reportMolecule}_report.html`)\r\n    \r\n    let extra_plotInclude = _.fill(Array(plotID.length), false)\r\n\r\n    $: console.log(extra_plotInclude, plotID)\r\n    \r\n    let reportTitle = \"\", reportComments = \"\", reportMethod = \"info\", reportMolecule = \"\", reportCount = 0\r\n    let include_table = includeTable, include_plot = true\r\n    let reportTitleContents = \"\", loadContent = \"\";\r\n    const stylesheet = path.resolve(__dirname, 'assets/reports/template.css')\r\n\r\n    const getHTMLContent = (content) =>{\r\n\r\n        return (\r\n            `<!DOCTYPE html>\r\n            <html lang=\"en\">\r\n                <head>\r\n                    <meta charset='utf8'>\r\n                    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n                    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n                    <title>${reportMolecule} Reports</title>\r\n                    <link rel=\"stylesheet\" type='text/css' href=\"report_stylesheet.css\">\r\n                </head>\r\n\r\n                <body>\r\n                    <section class=\"section\" id=\"mainSection\">\r\n                        <div class=\"content\">\r\n                            <h1 id=\"mainTitle\">${reportMolecule}</h1>\r\n                            ${content}\r\n                        </div>\r\n                    </section>\r\n                </body>\r\n            </html>`\r\n\r\n        )\r\n\r\n    }\r\n\r\n    function getImage(imgID) {\r\n        return new Promise(resolve => {\r\n\r\n            Plotly.toImage(imgID, {format: 'png', width: 1000, height: 500}).then(dataURL =>{resolve(dataURL)})\r\n        });\r\n    }\r\n    \r\n    const exprtToHtml = async (content) => {\r\n        fs.writeFile(reportFile, content, function(err) {\r\n\r\n            if(err) {\r\n                createToast(\"Report couldn't be added.\", \"danger\")\r\n                return console.log(err);\r\n            }\r\n            console.log(\"The file was saved!\");\r\n            createToast(\"Report added\", \"success\")\r\n\r\n            let local_cssFile = path.resolve(currentLocation, 'reports/report_stylesheet.css')\r\n        \r\n            if (!fs.existsSync(local_cssFile)){\r\n                fs.copyFile(stylesheet, local_cssFile, (err) => {\r\n                    if (err) throw err;\r\n                    console.log('template.css file copied');\r\n                });\r\n            }\r\n            console.log(\"Exported to HTML\")\r\n        })\r\n\r\n    }\r\n\r\n    const addReport = async() => {\r\n\r\n        let reportDir = path.resolve(currentLocation, \"reports\")\r\n        if (!fs.existsSync(reportDir)) {fs.mkdirSync(reportDir); console.log(\"reports directory created\")}\r\n\r\n        reportCount++\r\n        if (reportTitle.length == 0) reportTitle = `Title-${reportCount}`\r\n        if (reportComments.length == 0) reportComments = \"-\"\r\n        \r\n        let tableData, imgList_HTML = []\r\n        include_table ? tableData = `<table class='table is-bordered is-hoverable'>${document.getElementById(tableID).innerHTML}</table>` : tableData = \"\\n\"\r\n        let index = 0\r\n        \r\n        await asyncForEach(extra_plotInclude, async (value)=>{\r\n            if (value) {\r\n                console.log(\"Request Image URL for \", plotID[index])\r\n                let imgURL = await getImage(plotID[index])\r\n\r\n                console.log(`Received Image URL for ${plotID[index]}\\n`)\r\n                imgList_HTML = [...imgList_HTML, `<img id='img-${plotID[index]}' src='${imgURL}'>`]\r\n\r\n                console.log(`${plotID[index]} Included in HTML`)\r\n            }\r\n            index++\r\n        })\r\n\r\n        console.log(\"Combining HTML to write\")\r\n        reportTitleContents += `\\n<div class=\"content\"><h1 class=\"notification is-${reportMethod}\">${reportTitle}</h1>\\n` \r\n            + marked(reportComments)\r\n            + imgList_HTML.toString()\r\n            + tableData\r\n            + \"\\n<hr></div>\\n\"\r\n\r\n        loadContent = getHTMLContent(reportTitleContents)\r\n        reportComments = reportTitle = \"\"\r\n\r\n        exprtToHtml(loadContent)\r\n    }\r\n\r\n\r\n    let exportMethod = \"landscape\", pageSize = \"A4\"\r\n\r\n    const showReport = ({export_pdf=false}={}) => {\r\n\r\n        let reportWindow = new BrowserWindow({ width: 1200, minWidth :600, height: 600, parent: remote.getCurrentWindow(), show:!export_pdf})\r\n        reportWindow.on('closed', () => { reportWindow = null; console.log(\"Report window closed\") })\r\n        reportWindow.loadURL(reportFile)\r\n        reportWindow.webContents.on('did-finish-load', ()=>{ \r\n            console.log(\"Report loaded\")\r\n            if(export_pdf) {\r\n\r\n                let landscape;\r\n                exportMethod == \"landscape\" ? landscape = true : landscape = false\r\n                \r\n                if (process.versions.electron >= \"7\") {\r\n                    reportWindow.webContents.printToPDF({printBackground: true, landscape:landscape, pageSize:pageSize})\r\n                    .then(data => {\r\n                        fs.writeFile(reportFile.replace(\".html\", \".pdf\"), data, (error) => {\r\n                            if (error) {$modalContent = error; $activated = true; return}\r\n                            createToast('Write PDF successfully.', \"success\")\r\n                        })\r\n                    }).catch(error => { $modalContent = error; $activated = true })\r\n\r\n                } else {\r\n                    reportWindow.webContents.printToPDF({printBackground: true, landscape:landscape, pageSize:pageSize}, (error, data) => {\r\n                        if(error) { $modalContent = error; $activated = true; return}\r\n                        fs.writeFile(reportFile.replace(\".html\", \".pdf\"), data, (error) => {\r\n                            if (error) {$modalContent = error; $activated = true; return}\r\n                            createToast('Write PDF successfully.', \"success\")\r\n                        })\r\n                    })\r\n                }\r\n            }\r\n        })\r\n        \r\n    }\r\n\r\n</script>\r\n\r\n<style>\r\n\r\n    .notification { margin-top: 1em; border: 1px solid; }\r\n    .button {margin-right: 1em;}\r\n\r\n</style>\r\n\r\n<div class=\"title notification is-link\">Add to report</div>\r\n\r\n<div style=\"margin-bottom:1em;\">\r\n\r\n    <Textfield style=\"height:3em; width:20em;\" variant=\"outlined\" bind:value={reportMolecule} label=\"Molecule Name\" />\r\n    <button class=\"button is-pulled-right is-warning\" \r\n        on:click=\"{()=>{reportTitleContents=\"\"; reportCount=0; createToast(\"Resetted\", \"warning\")}}\">Reset Report</button>\r\n\r\n</div>\r\n<div class=\"align report\" {id} >\r\n\r\n    {#each [{name:\"info\", color:\"white\"}, {name:\"success\", color:\"#00ff00\"}, {name:\"warning\", color:\"yellow\"}, {name:\"danger\", color:\"red\"}] as method}\r\n        <FormField >\r\n            <Radio bind:group={reportMethod} value={method.name}  />\r\n            <span slot=\"label\" style=\"color:{method.color}\">{method.name}</span>\r\n        </FormField>\r\n    {/each}\r\n\r\n    {#if includeTable}\r\n        <CustomCheckbox bind:selected={include_table} label={\"Include table\"}/>\r\n    {/if}\r\n    \r\n    {#each plotID as ID, index}\r\n        <CustomCheckbox bind:selected={extra_plotInclude[index]} label={ID}/>\r\n    {/each}\r\n    <Textfield style=\"height:3em; margin-bottom:1em;\" variant=\"outlined\" bind:value={reportTitle} label=\"Title\" />\r\n    <Textfield textarea bind:value={reportComments} label=\"Comments\"  \r\n        input$aria-controls=\"{id}_comments\" input$aria-describedby=\"{id}_comments\"/>\r\n    <HelperText id=\"{id}_comments\">\r\n        NOTE: You can write in markdown format (eg: # Title, ## Subtilte, **bold**, _italics_, > BlockQuotes, >> Nested BlockQuotes,  1., 2. for list, etc.,)\r\n    </HelperText>\r\n\r\n    <div class=\"align\" style=\"margin-top:1em;\">\r\n    \r\n        <button class=\"button is-link\" use:Ripple={[true, {color: 'primary'}]} tabindex=\"0\" on:click={addReport}>Add to Report</button>\r\n        <button class=\"button is-link\" use:Ripple={[true, {color: 'primary'}]} tabindex=\"0\" on:click={showReport}>Show Report</button>\r\n        <button class=\"button is-link\" use:Ripple={[true, {color: 'primary'}]} tabindex=\"0\" on:click=\"{()=>showReport({export_pdf:true})}\">EXPORT to PDF</button>\r\n        {#each [\"landscape\", \"portrait\"] as method}\r\n            <FormField >\r\n                <Radio bind:group={exportMethod} value={method}  />\r\n                <span slot=\"label\" style=\"color:{method}\">{method}</span>\r\n            </FormField>\r\n        {/each}\r\n\r\n        <Select bind:value={pageSize} label=\"pageSize\" style=\"margin-left:1em;\">\r\n            {#each [\"A3\", \"A4\", \"A5\", \"Legal\", \"Letter\"] as file}\r\n                <Option value={file} selected={pageSize  === file}>{file}</Option>\r\n            {/each}\r\n        </Select>\r\n\r\n    </div>\r\n\r\n</div>",
    "<script>\r\n    export let title = \"Quick View\", active = false, style = \"\", footer = true;\r\n</script>\r\n\r\n<style>\r\n\r\n    .quickview {margin: 5em 0;}\r\n    footer, .quickview {background-color: #594098fa;}\r\n    p {color: #fafafa;}\r\n    .delete {background-color: #fafafa;}\r\n    /* .quickview-body {padding: 1em;} */\r\n    .delete:hover {background-color: #f14668;}\r\n    \r\n</style>\r\n\r\n<div class=\"quickview\" class:is-active={active}>\r\n  \r\n  <header class=\"quickview-header\">\r\n    <p class=\"title\">{title}</p>\r\n    <span class=\"delete\" data-dismiss=\"quickview\" on:click=\"{()=>active=false}\"></span>\r\n  </header>\r\n\r\n  <div class=\"quickview-body\" {style}>\r\n    <div class=\"quickview-block\">\r\n      <slot>Contents</slot>\r\n    </div>\r\n  </div>\r\n\r\n  {#if footer}\r\n    <footer class=\"quickview-footer\"> </footer>\r\n  {/if}\r\n</div>"
  ],
  "names": [],
  "mappings": "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"
}